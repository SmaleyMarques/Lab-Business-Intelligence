// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package bi_forest.carga_dim_material_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: CARGA_DIM_MATERIAL Purpose: <br>
 * Description: CADASTRO DE MATERIAL <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class CARGA_DIM_MATERIAL implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "CARGA_DIM_MATERIAL";
	private final String projectName = "BI_FOREST";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				CARGA_DIM_MATERIAL.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(CARGA_DIM_MATERIAL.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBSCD_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_SUB_CATEGORIA_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_MATERIAL_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_TIPO_MAT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_LINHA_PRODUTO_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_DIM_MATERIAL = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SK_MAT;

				public int getSK_MAT () {
					return this.SK_MAT;
				}
				
			    public int SK_EMPRESA;

				public int getSK_EMPRESA () {
					return this.SK_EMPRESA;
				}
				
			    public int SK_TIP_MAT;

				public int getSK_TIP_MAT () {
					return this.SK_TIP_MAT;
				}
				
			    public int SK_LINHA_PROD;

				public int getSK_LINHA_PROD () {
					return this.SK_LINHA_PROD;
				}
				
			    public int SK_SUB_CATEG;

				public int getSK_SUB_CATEG () {
					return this.SK_SUB_CATEG;
				}
				
			    public int COD_EMPRESA;

				public int getCOD_EMPRESA () {
					return this.COD_EMPRESA;
				}
				
			    public int COD_MAT;

				public int getCOD_MAT () {
					return this.COD_MAT;
				}
				
			    public String DESCRICAO;

				public String getDESCRICAO () {
					return this.DESCRICAO;
				}
				
			    public BigDecimal PRECO_UNIT;

				public BigDecimal getPRECO_UNIT () {
					return this.PRECO_UNIT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SK_MAT;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.SK_MAT != other.SK_MAT)
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.SK_MAT = this.SK_MAT;
	            other.SK_EMPRESA = this.SK_EMPRESA;
	            other.SK_TIP_MAT = this.SK_TIP_MAT;
	            other.SK_LINHA_PROD = this.SK_LINHA_PROD;
	            other.SK_SUB_CATEG = this.SK_SUB_CATEG;
	            other.COD_EMPRESA = this.COD_EMPRESA;
	            other.COD_MAT = this.COD_MAT;
	            other.DESCRICAO = this.DESCRICAO;
	            other.PRECO_UNIT = this.PRECO_UNIT;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.SK_MAT = this.SK_MAT;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL.length) {
				if(length < 1024 && commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL.length == 0) {
   					commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL = new byte[1024];
				} else {
   					commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL, 0, length);
			strReturn = new String(commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_DIM_MATERIAL) {

        	try {

        		int length = 0;
		
			        this.SK_MAT = dis.readInt();
					
			        this.SK_EMPRESA = dis.readInt();
					
			        this.SK_TIP_MAT = dis.readInt();
					
			        this.SK_LINHA_PROD = dis.readInt();
					
			        this.SK_SUB_CATEG = dis.readInt();
					
			        this.COD_EMPRESA = dis.readInt();
					
			        this.COD_MAT = dis.readInt();
					
					this.DESCRICAO = readString(dis);
					
						this.PRECO_UNIT = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_MAT);
					
					// int
				
		            	dos.writeInt(this.SK_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.SK_TIP_MAT);
					
					// int
				
		            	dos.writeInt(this.SK_LINHA_PROD);
					
					// int
				
		            	dos.writeInt(this.SK_SUB_CATEG);
					
					// int
				
		            	dos.writeInt(this.COD_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.COD_MAT);
					
					// String
				
						writeString(this.DESCRICAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_UNIT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_MAT="+String.valueOf(SK_MAT));
		sb.append(",SK_EMPRESA="+String.valueOf(SK_EMPRESA));
		sb.append(",SK_TIP_MAT="+String.valueOf(SK_TIP_MAT));
		sb.append(",SK_LINHA_PROD="+String.valueOf(SK_LINHA_PROD));
		sb.append(",SK_SUB_CATEG="+String.valueOf(SK_SUB_CATEG));
		sb.append(",COD_EMPRESA="+String.valueOf(COD_EMPRESA));
		sb.append(",COD_MAT="+String.valueOf(COD_MAT));
		sb.append(",DESCRICAO="+DESCRICAO);
		sb.append(",PRECO_UNIT="+String.valueOf(PRECO_UNIT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SK_MAT, other.SK_MAT);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_DIM_MATERIAL = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SK_MAT;

				public int getSK_MAT () {
					return this.SK_MAT;
				}
				
			    public int SK_EMPRESA;

				public int getSK_EMPRESA () {
					return this.SK_EMPRESA;
				}
				
			    public int SK_TIP_MAT;

				public int getSK_TIP_MAT () {
					return this.SK_TIP_MAT;
				}
				
			    public int SK_LINHA_PROD;

				public int getSK_LINHA_PROD () {
					return this.SK_LINHA_PROD;
				}
				
			    public int SK_SUB_CATEG;

				public int getSK_SUB_CATEG () {
					return this.SK_SUB_CATEG;
				}
				
			    public int COD_EMPRESA;

				public int getCOD_EMPRESA () {
					return this.COD_EMPRESA;
				}
				
			    public int COD_MAT;

				public int getCOD_MAT () {
					return this.COD_MAT;
				}
				
			    public String DESCRICAO;

				public String getDESCRICAO () {
					return this.DESCRICAO;
				}
				
			    public BigDecimal PRECO_UNIT;

				public BigDecimal getPRECO_UNIT () {
					return this.PRECO_UNIT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SK_MAT;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OnRowsEndStructtAggregateRow_1 other = (OnRowsEndStructtAggregateRow_1) obj;
		
						if (this.SK_MAT != other.SK_MAT)
							return false;
					

		return true;
    }

	public void copyDataTo(OnRowsEndStructtAggregateRow_1 other) {

		other.SK_MAT = this.SK_MAT;
	            other.SK_EMPRESA = this.SK_EMPRESA;
	            other.SK_TIP_MAT = this.SK_TIP_MAT;
	            other.SK_LINHA_PROD = this.SK_LINHA_PROD;
	            other.SK_SUB_CATEG = this.SK_SUB_CATEG;
	            other.COD_EMPRESA = this.COD_EMPRESA;
	            other.COD_MAT = this.COD_MAT;
	            other.DESCRICAO = this.DESCRICAO;
	            other.PRECO_UNIT = this.PRECO_UNIT;
	            
	}

	public void copyKeysDataTo(OnRowsEndStructtAggregateRow_1 other) {

		other.SK_MAT = this.SK_MAT;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL.length) {
				if(length < 1024 && commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL.length == 0) {
   					commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL = new byte[1024];
				} else {
   					commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL, 0, length);
			strReturn = new String(commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_DIM_MATERIAL) {

        	try {

        		int length = 0;
		
			        this.SK_MAT = dis.readInt();
					
			        this.SK_EMPRESA = dis.readInt();
					
			        this.SK_TIP_MAT = dis.readInt();
					
			        this.SK_LINHA_PROD = dis.readInt();
					
			        this.SK_SUB_CATEG = dis.readInt();
					
			        this.COD_EMPRESA = dis.readInt();
					
			        this.COD_MAT = dis.readInt();
					
					this.DESCRICAO = readString(dis);
					
						this.PRECO_UNIT = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_MAT);
					
					// int
				
		            	dos.writeInt(this.SK_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.SK_TIP_MAT);
					
					// int
				
		            	dos.writeInt(this.SK_LINHA_PROD);
					
					// int
				
		            	dos.writeInt(this.SK_SUB_CATEG);
					
					// int
				
		            	dos.writeInt(this.COD_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.COD_MAT);
					
					// String
				
						writeString(this.DESCRICAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_UNIT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_MAT="+String.valueOf(SK_MAT));
		sb.append(",SK_EMPRESA="+String.valueOf(SK_EMPRESA));
		sb.append(",SK_TIP_MAT="+String.valueOf(SK_TIP_MAT));
		sb.append(",SK_LINHA_PROD="+String.valueOf(SK_LINHA_PROD));
		sb.append(",SK_SUB_CATEG="+String.valueOf(SK_SUB_CATEG));
		sb.append(",COD_EMPRESA="+String.valueOf(COD_EMPRESA));
		sb.append(",COD_MAT="+String.valueOf(COD_MAT));
		sb.append(",DESCRICAO="+DESCRICAO);
		sb.append(",PRECO_UNIT="+String.valueOf(PRECO_UNIT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SK_MAT, other.SK_MAT);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class SAIDAStruct implements routines.system.IPersistableRow<SAIDAStruct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_DIM_MATERIAL = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SK_MAT;

				public int getSK_MAT () {
					return this.SK_MAT;
				}
				
			    public int SK_EMPRESA;

				public int getSK_EMPRESA () {
					return this.SK_EMPRESA;
				}
				
			    public int SK_TIP_MAT;

				public int getSK_TIP_MAT () {
					return this.SK_TIP_MAT;
				}
				
			    public int SK_LINHA_PROD;

				public int getSK_LINHA_PROD () {
					return this.SK_LINHA_PROD;
				}
				
			    public int SK_SUB_CATEG;

				public int getSK_SUB_CATEG () {
					return this.SK_SUB_CATEG;
				}
				
			    public int COD_EMPRESA;

				public int getCOD_EMPRESA () {
					return this.COD_EMPRESA;
				}
				
			    public int COD_MAT;

				public int getCOD_MAT () {
					return this.COD_MAT;
				}
				
			    public String DESCRICAO;

				public String getDESCRICAO () {
					return this.DESCRICAO;
				}
				
			    public BigDecimal PRECO_UNIT;

				public BigDecimal getPRECO_UNIT () {
					return this.PRECO_UNIT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SK_MAT;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final SAIDAStruct other = (SAIDAStruct) obj;
		
						if (this.SK_MAT != other.SK_MAT)
							return false;
					

		return true;
    }

	public void copyDataTo(SAIDAStruct other) {

		other.SK_MAT = this.SK_MAT;
	            other.SK_EMPRESA = this.SK_EMPRESA;
	            other.SK_TIP_MAT = this.SK_TIP_MAT;
	            other.SK_LINHA_PROD = this.SK_LINHA_PROD;
	            other.SK_SUB_CATEG = this.SK_SUB_CATEG;
	            other.COD_EMPRESA = this.COD_EMPRESA;
	            other.COD_MAT = this.COD_MAT;
	            other.DESCRICAO = this.DESCRICAO;
	            other.PRECO_UNIT = this.PRECO_UNIT;
	            
	}

	public void copyKeysDataTo(SAIDAStruct other) {

		other.SK_MAT = this.SK_MAT;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL.length) {
				if(length < 1024 && commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL.length == 0) {
   					commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL = new byte[1024];
				} else {
   					commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL, 0, length);
			strReturn = new String(commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_DIM_MATERIAL) {

        	try {

        		int length = 0;
		
			        this.SK_MAT = dis.readInt();
					
			        this.SK_EMPRESA = dis.readInt();
					
			        this.SK_TIP_MAT = dis.readInt();
					
			        this.SK_LINHA_PROD = dis.readInt();
					
			        this.SK_SUB_CATEG = dis.readInt();
					
			        this.COD_EMPRESA = dis.readInt();
					
			        this.COD_MAT = dis.readInt();
					
					this.DESCRICAO = readString(dis);
					
						this.PRECO_UNIT = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_MAT);
					
					// int
				
		            	dos.writeInt(this.SK_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.SK_TIP_MAT);
					
					// int
				
		            	dos.writeInt(this.SK_LINHA_PROD);
					
					// int
				
		            	dos.writeInt(this.SK_SUB_CATEG);
					
					// int
				
		            	dos.writeInt(this.COD_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.COD_MAT);
					
					// String
				
						writeString(this.DESCRICAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_UNIT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_MAT="+String.valueOf(SK_MAT));
		sb.append(",SK_EMPRESA="+String.valueOf(SK_EMPRESA));
		sb.append(",SK_TIP_MAT="+String.valueOf(SK_TIP_MAT));
		sb.append(",SK_LINHA_PROD="+String.valueOf(SK_LINHA_PROD));
		sb.append(",SK_SUB_CATEG="+String.valueOf(SK_SUB_CATEG));
		sb.append(",COD_EMPRESA="+String.valueOf(COD_EMPRESA));
		sb.append(",COD_MAT="+String.valueOf(COD_MAT));
		sb.append(",DESCRICAO="+DESCRICAO);
		sb.append(",PRECO_UNIT="+String.valueOf(PRECO_UNIT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(SAIDAStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SK_MAT, other.SK_MAT);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EMPRESAStruct implements routines.system.IPersistableRow<EMPRESAStruct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_DIM_MATERIAL = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL = new byte[0];

	
			    public int SK_EMPRESA;

				public int getSK_EMPRESA () {
					return this.SK_EMPRESA;
				}
				
			    public int COD_EMPRESA;

				public int getCOD_EMPRESA () {
					return this.COD_EMPRESA;
				}
				
			    public String NOME_EMPRESA;

				public String getNOME_EMPRESA () {
					return this.NOME_EMPRESA;
				}
				
			    public String FANTASIA;

				public String getFANTASIA () {
					return this.FANTASIA;
				}
				
			    public String CNPJ;

				public String getCNPJ () {
					return this.CNPJ;
				}
				
			    public String ENDERECO;

				public String getENDERECO () {
					return this.ENDERECO;
				}
				
			    public String COD_CIDADE;

				public String getCOD_CIDADE () {
					return this.COD_CIDADE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL.length) {
				if(length < 1024 && commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL.length == 0) {
   					commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL = new byte[1024];
				} else {
   					commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL, 0, length);
			strReturn = new String(commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_DIM_MATERIAL) {

        	try {

        		int length = 0;
		
			        this.SK_EMPRESA = dis.readInt();
					
			        this.COD_EMPRESA = dis.readInt();
					
					this.NOME_EMPRESA = readString(dis);
					
					this.FANTASIA = readString(dis);
					
					this.CNPJ = readString(dis);
					
					this.ENDERECO = readString(dis);
					
					this.COD_CIDADE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.COD_EMPRESA);
					
					// String
				
						writeString(this.NOME_EMPRESA,dos);
					
					// String
				
						writeString(this.FANTASIA,dos);
					
					// String
				
						writeString(this.CNPJ,dos);
					
					// String
				
						writeString(this.ENDERECO,dos);
					
					// String
				
						writeString(this.COD_CIDADE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_EMPRESA="+String.valueOf(SK_EMPRESA));
		sb.append(",COD_EMPRESA="+String.valueOf(COD_EMPRESA));
		sb.append(",NOME_EMPRESA="+NOME_EMPRESA);
		sb.append(",FANTASIA="+FANTASIA);
		sb.append(",CNPJ="+CNPJ);
		sb.append(",ENDERECO="+ENDERECO);
		sb.append(",COD_CIDADE="+COD_CIDADE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(EMPRESAStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_DIM_MATERIAL = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SK_EMPRESA;

				public int getSK_EMPRESA () {
					return this.SK_EMPRESA;
				}
				
			    public int COD_EMPRESA;

				public int getCOD_EMPRESA () {
					return this.COD_EMPRESA;
				}
				
			    public String NOME_EMPRESA;

				public String getNOME_EMPRESA () {
					return this.NOME_EMPRESA;
				}
				
			    public String FANTASIA;

				public String getFANTASIA () {
					return this.FANTASIA;
				}
				
			    public String CNPJ;

				public String getCNPJ () {
					return this.CNPJ;
				}
				
			    public String ENDERECO;

				public String getENDERECO () {
					return this.ENDERECO;
				}
				
			    public String COD_CIDADE;

				public String getCOD_CIDADE () {
					return this.COD_CIDADE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SK_EMPRESA;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_1Struct other = (after_tDBInput_1Struct) obj;
		
						if (this.SK_EMPRESA != other.SK_EMPRESA)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_1Struct other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            other.COD_EMPRESA = this.COD_EMPRESA;
	            other.NOME_EMPRESA = this.NOME_EMPRESA;
	            other.FANTASIA = this.FANTASIA;
	            other.CNPJ = this.CNPJ;
	            other.ENDERECO = this.ENDERECO;
	            other.COD_CIDADE = this.COD_CIDADE;
	            
	}

	public void copyKeysDataTo(after_tDBInput_1Struct other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL.length) {
				if(length < 1024 && commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL.length == 0) {
   					commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL = new byte[1024];
				} else {
   					commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL, 0, length);
			strReturn = new String(commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_DIM_MATERIAL) {

        	try {

        		int length = 0;
		
			        this.SK_EMPRESA = dis.readInt();
					
			        this.COD_EMPRESA = dis.readInt();
					
					this.NOME_EMPRESA = readString(dis);
					
					this.FANTASIA = readString(dis);
					
					this.CNPJ = readString(dis);
					
					this.ENDERECO = readString(dis);
					
					this.COD_CIDADE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.COD_EMPRESA);
					
					// String
				
						writeString(this.NOME_EMPRESA,dos);
					
					// String
				
						writeString(this.FANTASIA,dos);
					
					// String
				
						writeString(this.CNPJ,dos);
					
					// String
				
						writeString(this.ENDERECO,dos);
					
					// String
				
						writeString(this.COD_CIDADE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_EMPRESA="+String.valueOf(SK_EMPRESA));
		sb.append(",COD_EMPRESA="+String.valueOf(COD_EMPRESA));
		sb.append(",NOME_EMPRESA="+NOME_EMPRESA);
		sb.append(",FANTASIA="+FANTASIA);
		sb.append(",CNPJ="+CNPJ);
		sb.append(",ENDERECO="+ENDERECO);
		sb.append(",COD_CIDADE="+COD_CIDADE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SK_EMPRESA, other.SK_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_4Process(globalMap);
		tDBInput_2Process(globalMap);
		tDBInput_5Process(globalMap);
		tDBInput_3Process(globalMap);

		EMPRESAStruct EMPRESA = new EMPRESAStruct();
SAIDAStruct SAIDA = new SAIDAStruct();
row6Struct row6 = new row6Struct();





	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"SAIDA");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------
	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				int SK_MAT;
    				int SK_EMPRESA;
    				int SK_TIP_MAT;
    				int SK_LINHA_PROD;
    				int SK_SUB_CATEG;
    				int COD_EMPRESA;
    				int COD_MAT;
    				String DESCRICAO;
    				BigDecimal PRECO_UNIT;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
								result = prime * result + (int) this.SK_MAT;
							
								result = prime * result + (int) this.SK_EMPRESA;
							
								result = prime * result + (int) this.SK_TIP_MAT;
							
								result = prime * result + (int) this.SK_LINHA_PROD;
							
								result = prime * result + (int) this.SK_SUB_CATEG;
							
								result = prime * result + (int) this.COD_EMPRESA;
							
								result = prime * result + (int) this.COD_MAT;
							
							result = prime * result + ((this.DESCRICAO == null) ? 0 : this.DESCRICAO.hashCode());
							
							result = prime * result + ((this.PRECO_UNIT == null) ? 0 : this.PRECO_UNIT.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.SK_MAT != other.SK_MAT) 
								return false;
						
							if (this.SK_EMPRESA != other.SK_EMPRESA) 
								return false;
						
							if (this.SK_TIP_MAT != other.SK_TIP_MAT) 
								return false;
						
							if (this.SK_LINHA_PROD != other.SK_LINHA_PROD) 
								return false;
						
							if (this.SK_SUB_CATEG != other.SK_SUB_CATEG) 
								return false;
						
							if (this.COD_EMPRESA != other.COD_EMPRESA) 
								return false;
						
							if (this.COD_MAT != other.COD_MAT) 
								return false;
						
							if (this.DESCRICAO == null) {
								if (other.DESCRICAO != null) 
									return false;
							} else if (!this.DESCRICAO.equals(other.DESCRICAO)) 
								return false;
						
							if (this.PRECO_UNIT == null) {
								if (other.PRECO_UNIT != null) 
									return false;
							} else if (!this.PRECO_UNIT.equals(other.PRECO_UNIT)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"EMPRESA");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<SUB_CATEGORIAStruct> tHash_Lookup_SUB_CATEGORIA = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<SUB_CATEGORIAStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<SUB_CATEGORIAStruct>) 
					globalMap.get( "tHash_Lookup_SUB_CATEGORIA" ))
					;					
					
	

SUB_CATEGORIAStruct SUB_CATEGORIAHashKey = new SUB_CATEGORIAStruct();
SUB_CATEGORIAStruct SUB_CATEGORIADefault = new SUB_CATEGORIAStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<MATERIALStruct> tHash_Lookup_MATERIAL = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<MATERIALStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<MATERIALStruct>) 
					globalMap.get( "tHash_Lookup_MATERIAL" ))
					;					
					
	

MATERIALStruct MATERIALHashKey = new MATERIALStruct();
MATERIALStruct MATERIALDefault = new MATERIALStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<TIPO_MATStruct> tHash_Lookup_TIPO_MAT = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<TIPO_MATStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<TIPO_MATStruct>) 
					globalMap.get( "tHash_Lookup_TIPO_MAT" ))
					;					
					
	

TIPO_MATStruct TIPO_MATHashKey = new TIPO_MATStruct();
TIPO_MATStruct TIPO_MATDefault = new TIPO_MATStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<LINHA_PRODUTOStruct> tHash_Lookup_LINHA_PRODUTO = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<LINHA_PRODUTOStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<LINHA_PRODUTOStruct>) 
					globalMap.get( "tHash_Lookup_LINHA_PRODUTO" ))
					;					
					
	

LINHA_PRODUTOStruct LINHA_PRODUTOHashKey = new LINHA_PRODUTOStruct();
LINHA_PRODUTOStruct LINHA_PRODUTODefault = new LINHA_PRODUTOStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
SAIDAStruct SAIDA_tmp = new SAIDAStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "ETLBI";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:yLgo5iPaNIzcgAzTmCUaJAfTLvWMMcMDR0Oenw5GHn0HTy9t");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
		    String port_tDBInput_1 = "1433";
		    String dbname_tDBInput_1 = "DW" ;
			String url_tDBInput_1 = "jdbc:jtds:sqlserver://" + "DESKTOP-SKA0L5T" ;
		    if (!"".equals(port_tDBInput_1)) {
		    	url_tDBInput_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_1)) {
				url_tDBInput_1 += "//" + "DW"; 
		    }
		    url_tDBInput_1 += ";appName=" + projectName + ";" + "INSTANCE=OLAP";
		    String dbschema_tDBInput_1 = "dbo";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT dbo.DIM_EMPRESA.SK_EMPRESA,\n		dbo.DIM_EMPRESA.COD_EMPRESA,\n		dbo.DIM_EMPRESA.NOME_EMPRESA,\n		dbo.DIM_EMPRESA.FAN"
+"TASIA,\n		dbo.DIM_EMPRESA.CNPJ,\n		dbo.DIM_EMPRESA.ENDERECO,\n		dbo.DIM_EMPRESA.COD_CIDADE\nFROM	dbo.DIM_EMPRESA";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								EMPRESA.SK_EMPRESA = 0;
							} else {
		                          
            EMPRESA.SK_EMPRESA = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								EMPRESA.COD_EMPRESA = 0;
							} else {
		                          
            EMPRESA.COD_EMPRESA = rs_tDBInput_1.getInt(2);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								EMPRESA.NOME_EMPRESA = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		EMPRESA.NOME_EMPRESA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	EMPRESA.NOME_EMPRESA = tmpContent_tDBInput_1;
                }
            } else {
                EMPRESA.NOME_EMPRESA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								EMPRESA.FANTASIA = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		EMPRESA.FANTASIA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	EMPRESA.FANTASIA = tmpContent_tDBInput_1;
                }
            } else {
                EMPRESA.FANTASIA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								EMPRESA.CNPJ = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(5);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		EMPRESA.CNPJ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	EMPRESA.CNPJ = tmpContent_tDBInput_1;
                }
            } else {
                EMPRESA.CNPJ = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								EMPRESA.ENDERECO = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(6);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		EMPRESA.ENDERECO = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	EMPRESA.ENDERECO = tmpContent_tDBInput_1;
                }
            } else {
                EMPRESA.ENDERECO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								EMPRESA.COD_CIDADE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(7);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
            		EMPRESA.COD_CIDADE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	EMPRESA.COD_CIDADE = tmpContent_tDBInput_1;
                }
            } else {
                EMPRESA.COD_CIDADE = null;
            }
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"EMPRESA");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "SUB_CATEGORIA" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopSUB_CATEGORIA = false;
       		  	    	
       		  	    	
 							SUB_CATEGORIAStruct SUB_CATEGORIAObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_SUB_CATEGORIA__SK_EMPRESA = EMPRESA.SK_EMPRESA ;
	                        		    	if(exprKeyValue_SUB_CATEGORIA__SK_EMPRESA == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			SUB_CATEGORIAHashKey.SK_EMPRESA = (int)(Integer) exprKeyValue_SUB_CATEGORIA__SK_EMPRESA;
                        		    		}
                        		    		

								
		                        	SUB_CATEGORIAHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_SUB_CATEGORIA.lookup( SUB_CATEGORIAHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_SUB_CATEGORIA.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLoopSUB_CATEGORIA = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLoopSUB_CATEGORIA = true;
			           		  	} // G 21
                    		  	
                    		

							SUB_CATEGORIAStruct SUB_CATEGORIA = null;
                    		  	 
							

								while ((tHash_Lookup_SUB_CATEGORIA != null && tHash_Lookup_SUB_CATEGORIA.hasNext()) || forceLoopSUB_CATEGORIA) { // G_TM_M_043

								
									 // CALL close loop of lookup 'SUB_CATEGORIA'
									
                    		  	 
							   
                    		  	 
	       		  	    	SUB_CATEGORIAStruct fromLookup_SUB_CATEGORIA = null;
							SUB_CATEGORIA = SUB_CATEGORIADefault;
										 
							
								
								if(!forceLoopSUB_CATEGORIA) { // G 46
								
							
								 
							
								
								fromLookup_SUB_CATEGORIA = tHash_Lookup_SUB_CATEGORIA.next();

							

							if(fromLookup_SUB_CATEGORIA != null) {
								SUB_CATEGORIA = fromLookup_SUB_CATEGORIA;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLoopSUB_CATEGORIA = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "MATERIAL" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopMATERIAL = false;
       		  	    	
       		  	    	
 							MATERIALStruct MATERIALObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_MATERIAL__COD_EMPRESA = EMPRESA.COD_EMPRESA ;
	                        		    	if(exprKeyValue_MATERIAL__COD_EMPRESA == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			MATERIALHashKey.COD_EMPRESA = (int)(Integer) exprKeyValue_MATERIAL__COD_EMPRESA;
                        		    		}
                        		    		
                        		    		    MATERIALHashKey.COD_CATEGORIA = SUB_CATEGORIA.COD_CATEGORIA ;
                        		    		

								
		                        	MATERIALHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_MATERIAL.lookup( MATERIALHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_MATERIAL.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLoopMATERIAL = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLoopMATERIAL = true;
			           		  	} // G 21
                    		  	
                    		

							MATERIALStruct MATERIAL = null;
                    		  	 
							

								while ((tHash_Lookup_MATERIAL != null && tHash_Lookup_MATERIAL.hasNext()) || forceLoopMATERIAL) { // G_TM_M_043

								
									 // CALL close loop of lookup 'MATERIAL'
									
                    		  	 
							   
                    		  	 
	       		  	    	MATERIALStruct fromLookup_MATERIAL = null;
							MATERIAL = MATERIALDefault;
										 
							
								
								if(!forceLoopMATERIAL) { // G 46
								
							
								 
							
								
								fromLookup_MATERIAL = tHash_Lookup_MATERIAL.next();

							

							if(fromLookup_MATERIAL != null) {
								MATERIAL = fromLookup_MATERIAL;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLoopMATERIAL = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "TIPO_MAT" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopTIPO_MAT = false;
       		  	    	
       		  	    	
 							TIPO_MATStruct TIPO_MATObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_TIPO_MAT__SK_EMPRESA = EMPRESA.SK_EMPRESA ;
	                        		    	if(exprKeyValue_TIPO_MAT__SK_EMPRESA == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			TIPO_MATHashKey.SK_EMPRESA = (int)(Integer) exprKeyValue_TIPO_MAT__SK_EMPRESA;
                        		    		}
                        		    		
	                        		    	Object exprKeyValue_TIPO_MAT__COD_TIP_MAT = MATERIAL.COD_TIP_MAT ;
	                        		    	if(exprKeyValue_TIPO_MAT__COD_TIP_MAT == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			TIPO_MATHashKey.COD_TIP_MAT = (int)(Integer) exprKeyValue_TIPO_MAT__COD_TIP_MAT;
                        		    		}
                        		    		

								
		                        	TIPO_MATHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_TIPO_MAT.lookup( TIPO_MATHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_TIPO_MAT.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLoopTIPO_MAT = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLoopTIPO_MAT = true;
			           		  	} // G 21
                    		  	
                    		

							TIPO_MATStruct TIPO_MAT = null;
                    		  	 
							

								while ((tHash_Lookup_TIPO_MAT != null && tHash_Lookup_TIPO_MAT.hasNext()) || forceLoopTIPO_MAT) { // G_TM_M_043

								
									 // CALL close loop of lookup 'TIPO_MAT'
									
                    		  	 
							   
                    		  	 
	       		  	    	TIPO_MATStruct fromLookup_TIPO_MAT = null;
							TIPO_MAT = TIPO_MATDefault;
										 
							
								
								if(!forceLoopTIPO_MAT) { // G 46
								
							
								 
							
								
								fromLookup_TIPO_MAT = tHash_Lookup_TIPO_MAT.next();

							

							if(fromLookup_TIPO_MAT != null) {
								TIPO_MAT = fromLookup_TIPO_MAT;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLoopTIPO_MAT = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "LINHA_PRODUTO" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopLINHA_PRODUTO = false;
       		  	    	
       		  	    	
 							LINHA_PRODUTOStruct LINHA_PRODUTOObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_LINHA_PRODUTO__SK_EMPRESA = EMPRESA.SK_EMPRESA ;
	                        		    	if(exprKeyValue_LINHA_PRODUTO__SK_EMPRESA == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			LINHA_PRODUTOHashKey.SK_EMPRESA = (int)(Integer) exprKeyValue_LINHA_PRODUTO__SK_EMPRESA;
                        		    		}
                        		    		
	                        		    	Object exprKeyValue_LINHA_PRODUTO__COD_LINHA = MATERIAL.COD_LINHA ;
	                        		    	if(exprKeyValue_LINHA_PRODUTO__COD_LINHA == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			LINHA_PRODUTOHashKey.COD_LINHA = (int)(Integer) exprKeyValue_LINHA_PRODUTO__COD_LINHA;
                        		    		}
                        		    		

								
		                        	LINHA_PRODUTOHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_LINHA_PRODUTO.lookup( LINHA_PRODUTOHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_LINHA_PRODUTO.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLoopLINHA_PRODUTO = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLoopLINHA_PRODUTO = true;
			           		  	} // G 21
                    		  	
                    		

							LINHA_PRODUTOStruct LINHA_PRODUTO = null;
                    		  	 
							

								while ((tHash_Lookup_LINHA_PRODUTO != null && tHash_Lookup_LINHA_PRODUTO.hasNext()) || forceLoopLINHA_PRODUTO) { // G_TM_M_043

								
									 // CALL close loop of lookup 'LINHA_PRODUTO'
									
                    		  	 
							   
                    		  	 
	       		  	    	LINHA_PRODUTOStruct fromLookup_LINHA_PRODUTO = null;
							LINHA_PRODUTO = LINHA_PRODUTODefault;
										 
							
								
								if(!forceLoopLINHA_PRODUTO) { // G 46
								
							
								 
							
								
								fromLookup_LINHA_PRODUTO = tHash_Lookup_LINHA_PRODUTO.next();

							

							if(fromLookup_LINHA_PRODUTO != null) {
								LINHA_PRODUTO = fromLookup_LINHA_PRODUTO;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLoopLINHA_PRODUTO = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

SAIDA = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'SAIDA'
SAIDA_tmp.SK_MAT = 0;
SAIDA_tmp.SK_EMPRESA = EMPRESA.SK_EMPRESA ;
SAIDA_tmp.SK_TIP_MAT = TIPO_MAT.SK_TIP_MAT ;
SAIDA_tmp.SK_LINHA_PROD = LINHA_PRODUTO.SK_LINHA_PROD ;
SAIDA_tmp.SK_SUB_CATEG = SUB_CATEGORIA.SK_SUB_CATEG ;
SAIDA_tmp.COD_EMPRESA = EMPRESA.COD_EMPRESA ;
SAIDA_tmp.COD_MAT = MATERIAL.COD_MAT ;
SAIDA_tmp.DESCRICAO = MATERIAL.DESCRICAO ;
SAIDA_tmp.PRECO_UNIT = MATERIAL.PRECO_UNIT ;
SAIDA = SAIDA_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "SAIDA"
if(SAIDA != null) { 



	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"SAIDA");
					}
					
	
operation_finder_tAggregateRow_1.SK_MAT = SAIDA.SK_MAT;
			operation_finder_tAggregateRow_1.SK_EMPRESA = SAIDA.SK_EMPRESA;
			operation_finder_tAggregateRow_1.SK_TIP_MAT = SAIDA.SK_TIP_MAT;
			operation_finder_tAggregateRow_1.SK_LINHA_PROD = SAIDA.SK_LINHA_PROD;
			operation_finder_tAggregateRow_1.SK_SUB_CATEG = SAIDA.SK_SUB_CATEG;
			operation_finder_tAggregateRow_1.COD_EMPRESA = SAIDA.COD_EMPRESA;
			operation_finder_tAggregateRow_1.COD_MAT = SAIDA.COD_MAT;
			operation_finder_tAggregateRow_1.DESCRICAO = SAIDA.DESCRICAO;
			operation_finder_tAggregateRow_1.PRECO_UNIT = SAIDA.PRECO_UNIT;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.SK_MAT = operation_finder_tAggregateRow_1.SK_MAT;
				operation_result_tAggregateRow_1.SK_EMPRESA = operation_finder_tAggregateRow_1.SK_EMPRESA;
				operation_result_tAggregateRow_1.SK_TIP_MAT = operation_finder_tAggregateRow_1.SK_TIP_MAT;
				operation_result_tAggregateRow_1.SK_LINHA_PROD = operation_finder_tAggregateRow_1.SK_LINHA_PROD;
				operation_result_tAggregateRow_1.SK_SUB_CATEG = operation_finder_tAggregateRow_1.SK_SUB_CATEG;
				operation_result_tAggregateRow_1.COD_EMPRESA = operation_finder_tAggregateRow_1.COD_EMPRESA;
				operation_result_tAggregateRow_1.COD_MAT = operation_finder_tAggregateRow_1.COD_MAT;
				operation_result_tAggregateRow_1.DESCRICAO = operation_finder_tAggregateRow_1.DESCRICAO;
				operation_result_tAggregateRow_1.PRECO_UNIT = operation_finder_tAggregateRow_1.PRECO_UNIT;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */

} // End of branch "SAIDA"



	
		} // close loop of lookup 'LINHA_PRODUTO' // G_TM_M_043
		
		} // close loop of lookup 'TIPO_MAT' // G_TM_M_043
		
		} // close loop of lookup 'MATERIAL' // G_TM_M_043
		
		} // close loop of lookup 'SUB_CATEGORIA' // G_TM_M_043
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_SUB_CATEGORIA != null) {
						tHash_Lookup_SUB_CATEGORIA.endGet();
					}
					globalMap.remove( "tHash_Lookup_SUB_CATEGORIA" );

					
					
				
					if(tHash_Lookup_MATERIAL != null) {
						tHash_Lookup_MATERIAL.endGet();
					}
					globalMap.remove( "tHash_Lookup_MATERIAL" );

					
					
				
					if(tHash_Lookup_TIPO_MAT != null) {
						tHash_Lookup_TIPO_MAT.endGet();
					}
					globalMap.remove( "tHash_Lookup_TIPO_MAT" );

					
					
				
					if(tHash_Lookup_LINHA_PRODUTO != null) {
						tHash_Lookup_LINHA_PRODUTO.endGet();
					}
					globalMap.remove( "tHash_Lookup_LINHA_PRODUTO" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"EMPRESA");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"SAIDA");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */


	
	/**
	 * [tDBSCD_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBSCD_1", false);
		start_Hash.put("tDBSCD_1", System.currentTimeMillis());
		
	
	currentComponent="tDBSCD_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tDBSCD_1 = 0;
		



        class SCDSK_tDBSCD_1 {
private int hashCode;
public boolean hashCodeDirty = true;
int COD_EMPRESA;
int COD_MAT;
public boolean equals(Object obj) {
if (this == obj) return true;
if (obj == null) return false;
if (getClass() != obj.getClass()) return false;
final SCDSK_tDBSCD_1 other = (SCDSK_tDBSCD_1) obj;
if (this.COD_EMPRESA!= other.COD_EMPRESA)
return false;

if (this.COD_MAT!= other.COD_MAT)
return false;

return true;
}
public int hashCode() {
if(hashCodeDirty) {
int prime = 31;hashCode = prime * hashCode + COD_EMPRESA;
hashCode = prime * hashCode + COD_MAT;
hashCodeDirty = false;
}
return hashCode;
}
}

    class SCDStruct_tDBSCD_1 {
private String DESCRICAO;
private BigDecimal PRECO_UNIT;
private int SK_EMPRESA;
private int SK_LINHA_PROD;
private int SK_SUB_CATEG;
private int SK_TIP_MAT;
}

    int nb_line_update_tDBSCD_1 = 0;
    int nb_line_inserted_tDBSCD_1 = 0;
    int nb_line_rejected_tDBSCD_1 = 0;
    String tableName_tDBSCD_1 = null;
	String dbschema_tDBSCD_1 = null;
java.sql.Connection conn_tDBSCD_1 = null;
String dbUser_tDBSCD_1 = null;
    dbschema_tDBSCD_1 = "dbo";
    String driverClass_tDBSCD_1 = "net.sourceforge.jtds.jdbc.Driver";
	
    java.lang.Class.forName(driverClass_tDBSCD_1);
    String port_tDBSCD_1 = "1433";
    String dbname_tDBSCD_1 = "DW" ;
    String url_tDBSCD_1 = "jdbc:jtds:sqlserver://" + "DESKTOP-SKA0L5T" ; 
    if (!"".equals(port_tDBSCD_1)) {
    	url_tDBSCD_1 += ":" + "1433";
    }
    if (!"".equals(dbname_tDBSCD_1)) {
				url_tDBSCD_1 += "//" + "DW"; 
	
    }
    url_tDBSCD_1 += ";appName=" + projectName + ";" + "INSTANCE=OLAP";
    dbUser_tDBSCD_1 = "ETLBI";

 
	final String decryptedPassword_tDBSCD_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:WeJGatYXZ4BnzfYXalQLY2u0WMKNuIuyxvBq8yctARqZDeti");

    String dbPwd_tDBSCD_1 = decryptedPassword_tDBSCD_1;	
    conn_tDBSCD_1 = java.sql.DriverManager.getConnection(url_tDBSCD_1,dbUser_tDBSCD_1,dbPwd_tDBSCD_1);
	

    if(dbschema_tDBSCD_1 == null || dbschema_tDBSCD_1.trim().length() == 0) {
        tableName_tDBSCD_1 = "DIM_MATERIAL";
    } else {
        tableName_tDBSCD_1 = dbschema_tDBSCD_1 + "].[" + "DIM_MATERIAL";
    }
	org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBSCD_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();	
    String tmpValue_tDBSCD_1 = null;    
        String search_tDBSCD_1 = "SELECT [COD_EMPRESA], [COD_MAT], [DESCRICAO], [PRECO_UNIT], [SK_EMPRESA], [SK_LINHA_PROD], [SK_SUB_CATEG], [SK_TIP_MAT] FROM [" + tableName_tDBSCD_1 + "]";
        java.sql.Statement statement_tDBSCD_1 = conn_tDBSCD_1.createStatement();
        java.sql.ResultSet resultSet_tDBSCD_1 = statement_tDBSCD_1.executeQuery(search_tDBSCD_1);
        java.util.Map<SCDSK_tDBSCD_1, SCDStruct_tDBSCD_1> cache_tDBSCD_1 = new java.util.HashMap<SCDSK_tDBSCD_1, SCDStruct_tDBSCD_1>();
        while(resultSet_tDBSCD_1.next()) {
            SCDSK_tDBSCD_1 sk_tDBSCD_1 = new SCDSK_tDBSCD_1();
            SCDStruct_tDBSCD_1 row_tDBSCD_1 = new SCDStruct_tDBSCD_1();
                    if(resultSet_tDBSCD_1.getObject(1) != null) {
                        sk_tDBSCD_1.COD_EMPRESA = resultSet_tDBSCD_1.getInt(1);
                    }
                    if(resultSet_tDBSCD_1.getObject(2) != null) {
                        sk_tDBSCD_1.COD_MAT = resultSet_tDBSCD_1.getInt(2);
                    }
                    if(resultSet_tDBSCD_1.getObject(3) != null) {
                        row_tDBSCD_1.DESCRICAO = resultSet_tDBSCD_1.getString(3);
                    }
                    if(resultSet_tDBSCD_1.getObject(4) != null) {
                        row_tDBSCD_1.PRECO_UNIT = resultSet_tDBSCD_1.getBigDecimal(4);
                    }
                    if(resultSet_tDBSCD_1.getObject(5) != null) {
                        row_tDBSCD_1.SK_EMPRESA = resultSet_tDBSCD_1.getInt(5);
                    }
                    if(resultSet_tDBSCD_1.getObject(6) != null) {
                        row_tDBSCD_1.SK_LINHA_PROD = resultSet_tDBSCD_1.getInt(6);
                    }
                    if(resultSet_tDBSCD_1.getObject(7) != null) {
                        row_tDBSCD_1.SK_SUB_CATEG = resultSet_tDBSCD_1.getInt(7);
                    }
                    if(resultSet_tDBSCD_1.getObject(8) != null) {
                        row_tDBSCD_1.SK_TIP_MAT = resultSet_tDBSCD_1.getInt(8);
                    }
            cache_tDBSCD_1.put(sk_tDBSCD_1, row_tDBSCD_1);
        }
        resultSet_tDBSCD_1.close();
        statement_tDBSCD_1.close();
        int nextSurrogateKey_tDBSCD_1 = 1;
            if(cache_tDBSCD_1.size() > 0) {
        String tmpQuery_tDBSCD_1 = "SELECT MAX([SK_MAT]) FROM [" + tableName_tDBSCD_1 + "]";
        java.sql.Statement tmpStmt_tDBSCD_1 = conn_tDBSCD_1.createStatement();
        java.sql.ResultSet tmpRS_tDBSCD_1 = tmpStmt_tDBSCD_1.executeQuery(tmpQuery_tDBSCD_1);
        if(tmpRS_tDBSCD_1.next() && tmpRS_tDBSCD_1.getObject(1) != null) {
            nextSurrogateKey_tDBSCD_1 = tmpRS_tDBSCD_1.getInt(1) + 1;
        }
        tmpRS_tDBSCD_1.close();
        tmpStmt_tDBSCD_1.close();
            }            
    String insertionSQL_tDBSCD_1 = "INSERT INTO [" + tableName_tDBSCD_1 + "]([SK_MAT], [COD_EMPRESA], [COD_MAT], [DESCRICAO], [PRECO_UNIT], [SK_EMPRESA], [SK_LINHA_PROD], [SK_SUB_CATEG], [SK_TIP_MAT]) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)";
    java.sql.PreparedStatement insertionStatement_tDBSCD_1 = conn_tDBSCD_1.prepareStatement(insertionSQL_tDBSCD_1);
        String updateSQLForType1_tDBSCD_1 = "UPDATE [" + tableName_tDBSCD_1 + "] SET [DESCRICAO] = ?, [PRECO_UNIT] = ?, [SK_EMPRESA] = ?, [SK_LINHA_PROD] = ?, [SK_SUB_CATEG] = ?, [SK_TIP_MAT] = ? WHERE [COD_EMPRESA] = ? AND [COD_MAT] = ?";
        java.sql.PreparedStatement updateForType1_tDBSCD_1 = conn_tDBSCD_1.prepareStatement(updateSQLForType1_tDBSCD_1);        
    
        SCDSK_tDBSCD_1 lookUpKey_tDBSCD_1 = null;        
    SCDStruct_tDBSCD_1 lookUpValue_tDBSCD_1 = null;

 



/**
 * [tDBSCD_1 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

            				    row6.SK_MAT = aggregated_row_tAggregateRow_1.SK_MAT;
            				    
            				    row6.SK_EMPRESA = aggregated_row_tAggregateRow_1.SK_EMPRESA;
            				    
            				    row6.SK_TIP_MAT = aggregated_row_tAggregateRow_1.SK_TIP_MAT;
            				    
            				    row6.SK_LINHA_PROD = aggregated_row_tAggregateRow_1.SK_LINHA_PROD;
            				    
            				    row6.SK_SUB_CATEG = aggregated_row_tAggregateRow_1.SK_SUB_CATEG;
            				    
            				    row6.COD_EMPRESA = aggregated_row_tAggregateRow_1.COD_EMPRESA;
            				    
            				    row6.COD_MAT = aggregated_row_tAggregateRow_1.COD_MAT;
            				    
            				    row6.DESCRICAO = aggregated_row_tAggregateRow_1.DESCRICAO;
            				    
            				    row6.PRECO_UNIT = aggregated_row_tAggregateRow_1.PRECO_UNIT;
            				    

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tDBSCD_1 main ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					

	try {
        lookUpKey_tDBSCD_1 = new SCDSK_tDBSCD_1();
            lookUpKey_tDBSCD_1.COD_EMPRESA = row6.COD_EMPRESA;
            lookUpKey_tDBSCD_1.COD_MAT = row6.COD_MAT;
        lookUpKey_tDBSCD_1.hashCodeDirty = true;
        lookUpValue_tDBSCD_1 = cache_tDBSCD_1.get(lookUpKey_tDBSCD_1);    
    if(lookUpValue_tDBSCD_1 == null) {
            lookUpValue_tDBSCD_1 = new SCDStruct_tDBSCD_1();
                            
                    insertionStatement_tDBSCD_1.setInt(1, nextSurrogateKey_tDBSCD_1);

                    nextSurrogateKey_tDBSCD_1++;
                    insertionStatement_tDBSCD_1.setInt(2, row6.COD_EMPRESA);

                    insertionStatement_tDBSCD_1.setInt(3, row6.COD_MAT);

                    if(row6.DESCRICAO == null) {
insertionStatement_tDBSCD_1.setNull(4, java.sql.Types.VARCHAR);
} else {
insertionStatement_tDBSCD_1.setString(4, row6.DESCRICAO);
}

                    insertionStatement_tDBSCD_1.setBigDecimal(5, row6.PRECO_UNIT);

                    insertionStatement_tDBSCD_1.setInt(6, row6.SK_EMPRESA);

                    insertionStatement_tDBSCD_1.setInt(7, row6.SK_LINHA_PROD);

                    insertionStatement_tDBSCD_1.setInt(8, row6.SK_SUB_CATEG);

                    insertionStatement_tDBSCD_1.setInt(9, row6.SK_TIP_MAT);

        nb_line_inserted_tDBSCD_1 += insertionStatement_tDBSCD_1.executeUpdate();
    } else {
            if((lookUpValue_tDBSCD_1.DESCRICAO == null && row6.DESCRICAO!= null) || (lookUpValue_tDBSCD_1.DESCRICAO != null && !lookUpValue_tDBSCD_1.DESCRICAO.equals(row6.DESCRICAO)) || (lookUpValue_tDBSCD_1.PRECO_UNIT == null && row6.PRECO_UNIT!= null) || (lookUpValue_tDBSCD_1.PRECO_UNIT != null && row6.PRECO_UNIT== null) || (lookUpValue_tDBSCD_1.PRECO_UNIT != null && lookUpValue_tDBSCD_1.PRECO_UNIT.compareTo(row6.PRECO_UNIT)!= 0) || lookUpValue_tDBSCD_1.SK_EMPRESA != row6.SK_EMPRESA || lookUpValue_tDBSCD_1.SK_LINHA_PROD != row6.SK_LINHA_PROD || lookUpValue_tDBSCD_1.SK_SUB_CATEG != row6.SK_SUB_CATEG || lookUpValue_tDBSCD_1.SK_TIP_MAT != row6.SK_TIP_MAT) {
                    if(row6.DESCRICAO == null) {
updateForType1_tDBSCD_1.setNull(1, java.sql.Types.VARCHAR);
} else {
updateForType1_tDBSCD_1.setString(1, row6.DESCRICAO);
}

                    updateForType1_tDBSCD_1.setBigDecimal(2, row6.PRECO_UNIT);

                    updateForType1_tDBSCD_1.setInt(3, row6.SK_EMPRESA);

                    updateForType1_tDBSCD_1.setInt(4, row6.SK_LINHA_PROD);

                    updateForType1_tDBSCD_1.setInt(5, row6.SK_SUB_CATEG);

                    updateForType1_tDBSCD_1.setInt(6, row6.SK_TIP_MAT);

                    updateForType1_tDBSCD_1.setInt(7, row6.COD_EMPRESA);

                    updateForType1_tDBSCD_1.setInt(8, row6.COD_MAT);

                nb_line_update_tDBSCD_1 += updateForType1_tDBSCD_1.executeUpdate();
            }
    }
    
	} catch (java.lang.Exception e) {//catch
  		
                System.err.print(e.getMessage());
	}//end catch
	
                lookUpValue_tDBSCD_1.DESCRICAO = row6.DESCRICAO;
                lookUpValue_tDBSCD_1.PRECO_UNIT = row6.PRECO_UNIT;
                lookUpValue_tDBSCD_1.SK_EMPRESA = row6.SK_EMPRESA;
                lookUpValue_tDBSCD_1.SK_LINHA_PROD = row6.SK_LINHA_PROD;
                lookUpValue_tDBSCD_1.SK_SUB_CATEG = row6.SK_SUB_CATEG;
                lookUpValue_tDBSCD_1.SK_TIP_MAT = row6.SK_TIP_MAT;
        cache_tDBSCD_1.put(lookUpKey_tDBSCD_1, lookUpValue_tDBSCD_1);


 


	tos_count_tDBSCD_1++;

/**
 * [tDBSCD_1 main ] stop
 */
	
	/**
	 * [tDBSCD_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	

 



/**
 * [tDBSCD_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBSCD_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	

 



/**
 * [tDBSCD_1 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tDBSCD_1 end ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	

    insertionStatement_tDBSCD_1.close();
        updateForType1_tDBSCD_1.close();
    
    if(conn_tDBSCD_1 != null && !conn_tDBSCD_1.isClosed()) {
        conn_tDBSCD_1.close();
    }    
    
    globalMap.put("tDBSCD_1_NB_LINE_UPDATED", nb_line_update_tDBSCD_1);
    globalMap.put("tDBSCD_1_NB_LINE_INSERTED", nb_line_inserted_tDBSCD_1);
    globalMap.put("tDBSCD_1_NB_LINE_REJECTED",nb_line_rejected_tDBSCD_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tDBSCD_1", true);
end_Hash.put("tDBSCD_1", System.currentTimeMillis());




/**
 * [tDBSCD_1 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_SUB_CATEGORIA"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_MATERIAL"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_TIPO_MAT"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_LINHA_PRODUTO"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tDBSCD_1 finally ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	

 



/**
 * [tDBSCD_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class SUB_CATEGORIAStruct implements routines.system.IPersistableComparableLookupRow<SUB_CATEGORIAStruct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_DIM_MATERIAL = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SK_SUB_CATEG;

				public int getSK_SUB_CATEG () {
					return this.SK_SUB_CATEG;
				}
				
			    public int SK_EMPRESA;

				public int getSK_EMPRESA () {
					return this.SK_EMPRESA;
				}
				
			    public int COD_CATEGORIA;

				public int getCOD_CATEGORIA () {
					return this.COD_CATEGORIA;
				}
				
			    public String DESC_CATEGORIA;

				public String getDESC_CATEGORIA () {
					return this.DESC_CATEGORIA;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SK_EMPRESA;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final SUB_CATEGORIAStruct other = (SUB_CATEGORIAStruct) obj;
		
						if (this.SK_EMPRESA != other.SK_EMPRESA)
							return false;
					

		return true;
    }

	public void copyDataTo(SUB_CATEGORIAStruct other) {

		other.SK_SUB_CATEG = this.SK_SUB_CATEG;
	            other.SK_EMPRESA = this.SK_EMPRESA;
	            other.COD_CATEGORIA = this.COD_CATEGORIA;
	            other.DESC_CATEGORIA = this.DESC_CATEGORIA;
	            
	}

	public void copyKeysDataTo(SUB_CATEGORIAStruct other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_DIM_MATERIAL) {

        	try {

        		int length = 0;
		
			        this.SK_EMPRESA = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_EMPRESA);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.SK_SUB_CATEG = dis.readInt();
					
			            this.COD_CATEGORIA = dis.readInt();
					
						this.DESC_CATEGORIA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.SK_SUB_CATEG);
					
		            	dos.writeInt(this.COD_CATEGORIA);
					
						writeString(this.DESC_CATEGORIA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_SUB_CATEG="+String.valueOf(SK_SUB_CATEG));
		sb.append(",SK_EMPRESA="+String.valueOf(SK_EMPRESA));
		sb.append(",COD_CATEGORIA="+String.valueOf(COD_CATEGORIA));
		sb.append(",DESC_CATEGORIA="+DESC_CATEGORIA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(SUB_CATEGORIAStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SK_EMPRESA, other.SK_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		SUB_CATEGORIAStruct SUB_CATEGORIA = new SUB_CATEGORIAStruct();




	
	/**
	 * [tAdvancedHash_SUB_CATEGORIA begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_SUB_CATEGORIA", false);
		start_Hash.put("tAdvancedHash_SUB_CATEGORIA", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_SUB_CATEGORIA";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"SUB_CATEGORIA");
					}
				
		int tos_count_tAdvancedHash_SUB_CATEGORIA = 0;
		

			   		// connection name:SUB_CATEGORIA
			   		// source node:tDBInput_4 - inputs:(after_tDBInput_1) outputs:(SUB_CATEGORIA,SUB_CATEGORIA) | target node:tAdvancedHash_SUB_CATEGORIA - inputs:(SUB_CATEGORIA) outputs:()
			   		// linked node: tMap_1 - inputs:(EMPRESA,SUB_CATEGORIA,MATERIAL,TIPO_MAT,LINHA_PRODUTO) outputs:(SAIDA)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_SUB_CATEGORIA = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<SUB_CATEGORIAStruct> tHash_Lookup_SUB_CATEGORIA =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<SUB_CATEGORIAStruct>getLookup(matchingModeEnum_SUB_CATEGORIA);
	   						   
		   	   	   globalMap.put("tHash_Lookup_SUB_CATEGORIA", tHash_Lookup_SUB_CATEGORIA);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_SUB_CATEGORIA begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_4  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4); 
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "ETLBI";
				
				 
	final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:H1XRPYJAtew3as4eAXw/vr/GAe2BKS5HYmZnBLM3BAioqWHU");
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
		    String port_tDBInput_4 = "1433";
		    String dbname_tDBInput_4 = "DW" ;
			String url_tDBInput_4 = "jdbc:jtds:sqlserver://" + "DESKTOP-SKA0L5T" ;
		    if (!"".equals(port_tDBInput_4)) {
		    	url_tDBInput_4 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_4)) {
				url_tDBInput_4 += "//" + "DW"; 
		    }
		    url_tDBInput_4 += ";appName=" + projectName + ";" + "INSTANCE=OLAP";
		    String dbschema_tDBInput_4 = "dbo";
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT dbo.DIM_SUB_CATEGORIA.SK_SUB_CATEG,\n		dbo.DIM_SUB_CATEGORIA.SK_EMPRESA,\n		dbo.DIM_SUB_CATEGORIA.COD_CATEGORIA,\n	"
+"	dbo.DIM_SUB_CATEGORIA.DESC_CATEGORIA\nFROM	dbo.DIM_SUB_CATEGORIA";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								SUB_CATEGORIA.SK_SUB_CATEG = 0;
							} else {
		                          
            SUB_CATEGORIA.SK_SUB_CATEG = rs_tDBInput_4.getInt(1);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								SUB_CATEGORIA.SK_EMPRESA = 0;
							} else {
		                          
            SUB_CATEGORIA.SK_EMPRESA = rs_tDBInput_4.getInt(2);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								SUB_CATEGORIA.COD_CATEGORIA = 0;
							} else {
		                          
            SUB_CATEGORIA.COD_CATEGORIA = rs_tDBInput_4.getInt(3);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								SUB_CATEGORIA.DESC_CATEGORIA = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(4);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		SUB_CATEGORIA.DESC_CATEGORIA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	SUB_CATEGORIA.DESC_CATEGORIA = tmpContent_tDBInput_4;
                }
            } else {
                SUB_CATEGORIA.DESC_CATEGORIA = null;
            }
		                    }
					





 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_SUB_CATEGORIA main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_SUB_CATEGORIA";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"SUB_CATEGORIA");
					}
					


			   
			   

					SUB_CATEGORIAStruct SUB_CATEGORIA_HashRow = new SUB_CATEGORIAStruct();
		   	   	   
				
				SUB_CATEGORIA_HashRow.SK_SUB_CATEG = SUB_CATEGORIA.SK_SUB_CATEG;
				
				SUB_CATEGORIA_HashRow.SK_EMPRESA = SUB_CATEGORIA.SK_EMPRESA;
				
				SUB_CATEGORIA_HashRow.COD_CATEGORIA = SUB_CATEGORIA.COD_CATEGORIA;
				
				SUB_CATEGORIA_HashRow.DESC_CATEGORIA = SUB_CATEGORIA.DESC_CATEGORIA;
				
			tHash_Lookup_SUB_CATEGORIA.put(SUB_CATEGORIA_HashRow);
			
            




 


	tos_count_tAdvancedHash_SUB_CATEGORIA++;

/**
 * [tAdvancedHash_SUB_CATEGORIA main ] stop
 */
	
	/**
	 * [tAdvancedHash_SUB_CATEGORIA process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_SUB_CATEGORIA";

	

 



/**
 * [tAdvancedHash_SUB_CATEGORIA process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_SUB_CATEGORIA process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_SUB_CATEGORIA";

	

 



/**
 * [tAdvancedHash_SUB_CATEGORIA process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
		if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
			
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_SUB_CATEGORIA end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_SUB_CATEGORIA";

	

tHash_Lookup_SUB_CATEGORIA.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"SUB_CATEGORIA");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_SUB_CATEGORIA", true);
end_Hash.put("tAdvancedHash_SUB_CATEGORIA", System.currentTimeMillis());




/**
 * [tAdvancedHash_SUB_CATEGORIA end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_SUB_CATEGORIA finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_SUB_CATEGORIA";

	

 



/**
 * [tAdvancedHash_SUB_CATEGORIA finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class MATERIALStruct implements routines.system.IPersistableComparableLookupRow<MATERIALStruct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_DIM_MATERIAL = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int COD_EMPRESA;

				public int getCOD_EMPRESA () {
					return this.COD_EMPRESA;
				}
				
			    public int COD_MAT;

				public int getCOD_MAT () {
					return this.COD_MAT;
				}
				
			    public String DESCRICAO;

				public String getDESCRICAO () {
					return this.DESCRICAO;
				}
				
			    public BigDecimal PRECO_UNIT;

				public BigDecimal getPRECO_UNIT () {
					return this.PRECO_UNIT;
				}
				
			    public int COD_TIP_MAT;

				public int getCOD_TIP_MAT () {
					return this.COD_TIP_MAT;
				}
				
			    public Integer ID_FOR;

				public Integer getID_FOR () {
					return this.ID_FOR;
				}
				
			    public Integer COD_LINHA;

				public Integer getCOD_LINHA () {
					return this.COD_LINHA;
				}
				
			    public Integer COD_CATEGORIA;

				public Integer getCOD_CATEGORIA () {
					return this.COD_CATEGORIA;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.COD_EMPRESA;
						
						result = prime * result + ((this.COD_CATEGORIA == null) ? 0 : this.COD_CATEGORIA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final MATERIALStruct other = (MATERIALStruct) obj;
		
						if (this.COD_EMPRESA != other.COD_EMPRESA)
							return false;
					
						if (this.COD_CATEGORIA == null) {
							if (other.COD_CATEGORIA != null)
								return false;
						
						} else if (!this.COD_CATEGORIA.equals(other.COD_CATEGORIA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(MATERIALStruct other) {

		other.COD_EMPRESA = this.COD_EMPRESA;
	            other.COD_MAT = this.COD_MAT;
	            other.DESCRICAO = this.DESCRICAO;
	            other.PRECO_UNIT = this.PRECO_UNIT;
	            other.COD_TIP_MAT = this.COD_TIP_MAT;
	            other.ID_FOR = this.ID_FOR;
	            other.COD_LINHA = this.COD_LINHA;
	            other.COD_CATEGORIA = this.COD_CATEGORIA;
	            
	}

	public void copyKeysDataTo(MATERIALStruct other) {

		other.COD_EMPRESA = this.COD_EMPRESA;
	            	other.COD_CATEGORIA = this.COD_CATEGORIA;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_DIM_MATERIAL) {

        	try {

        		int length = 0;
		
			        this.COD_EMPRESA = dis.readInt();
					
						this.COD_CATEGORIA = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.COD_EMPRESA);
					
					// Integer
				
						writeInteger(this.COD_CATEGORIA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.COD_MAT = dis.readInt();
					
						this.DESCRICAO = readString(dis,ois);
					
       			    	this.PRECO_UNIT = (BigDecimal) ois.readObject();
					
			            this.COD_TIP_MAT = dis.readInt();
					
						this.ID_FOR = readInteger(dis,ois);
					
						this.COD_LINHA = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.COD_MAT);
					
						writeString(this.DESCRICAO, dos, oos);
					
       			    	oos.writeObject(this.PRECO_UNIT);
					
		            	dos.writeInt(this.COD_TIP_MAT);
					
					writeInteger(this.ID_FOR, dos, oos);
					
					writeInteger(this.COD_LINHA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COD_EMPRESA="+String.valueOf(COD_EMPRESA));
		sb.append(",COD_MAT="+String.valueOf(COD_MAT));
		sb.append(",DESCRICAO="+DESCRICAO);
		sb.append(",PRECO_UNIT="+String.valueOf(PRECO_UNIT));
		sb.append(",COD_TIP_MAT="+String.valueOf(COD_TIP_MAT));
		sb.append(",ID_FOR="+String.valueOf(ID_FOR));
		sb.append(",COD_LINHA="+String.valueOf(COD_LINHA));
		sb.append(",COD_CATEGORIA="+String.valueOf(COD_CATEGORIA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(MATERIALStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.COD_EMPRESA, other.COD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.COD_CATEGORIA, other.COD_CATEGORIA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		MATERIALStruct MATERIAL = new MATERIALStruct();




	
	/**
	 * [tAdvancedHash_MATERIAL begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_MATERIAL", false);
		start_Hash.put("tAdvancedHash_MATERIAL", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_MATERIAL";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"MATERIAL");
					}
				
		int tos_count_tAdvancedHash_MATERIAL = 0;
		

			   		// connection name:MATERIAL
			   		// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(MATERIAL,MATERIAL) | target node:tAdvancedHash_MATERIAL - inputs:(MATERIAL) outputs:()
			   		// linked node: tMap_1 - inputs:(EMPRESA,SUB_CATEGORIA,MATERIAL,TIPO_MAT,LINHA_PRODUTO) outputs:(SAIDA)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_MATERIAL = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<MATERIALStruct> tHash_Lookup_MATERIAL =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<MATERIALStruct>getLookup(matchingModeEnum_MATERIAL);
	   						   
		   	   	   globalMap.put("tHash_Lookup_MATERIAL", tHash_Lookup_MATERIAL);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_MATERIAL begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2); 
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "ETLBI";
				
				 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:BqyOj89Btp7NFV0/7e5ToF+9FQaunuJrxHe1GhTVfRFXwzQv");
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
		    String port_tDBInput_2 = "1433";
		    String dbname_tDBInput_2 = "DW" ;
			String url_tDBInput_2 = "jdbc:jtds:sqlserver://" + "DESKTOP-SKA0L5T" ;
		    if (!"".equals(port_tDBInput_2)) {
		    	url_tDBInput_2 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_2)) {
				url_tDBInput_2 += "//" + "DW"; 
		    }
		    url_tDBInput_2 += ";appName=" + projectName + ";" + "INSTANCE=OLAP";
		    String dbschema_tDBInput_2 = "dbo";
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT dbo.STG_MATERIAL.COD_EMPRESA,\n		dbo.STG_MATERIAL.COD_MAT,\n		dbo.STG_MATERIAL.DESCRICAO,\n		dbo.STG_MATERIAL.PRECO"
+"_UNIT,\n		dbo.STG_MATERIAL.COD_TIP_MAT,\n		dbo.STG_MATERIAL.ID_FOR,\n		dbo.STG_MATERIAL.COD_LINHA,\n		dbo.STG_MATERIAL.COD_C"
+"ATEGORIA\nFROM	dbo.STG_MATERIAL";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								MATERIAL.COD_EMPRESA = 0;
							} else {
		                          
            MATERIAL.COD_EMPRESA = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								MATERIAL.COD_MAT = 0;
							} else {
		                          
            MATERIAL.COD_MAT = rs_tDBInput_2.getInt(2);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								MATERIAL.DESCRICAO = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(3);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		MATERIAL.DESCRICAO = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	MATERIAL.DESCRICAO = tmpContent_tDBInput_2;
                }
            } else {
                MATERIAL.DESCRICAO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								MATERIAL.PRECO_UNIT = null;
							} else {
		                          
            MATERIAL.PRECO_UNIT = rs_tDBInput_2.getBigDecimal(4);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								MATERIAL.COD_TIP_MAT = 0;
							} else {
		                          
            MATERIAL.COD_TIP_MAT = rs_tDBInput_2.getInt(5);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								MATERIAL.ID_FOR = null;
							} else {
		                          
            MATERIAL.ID_FOR = rs_tDBInput_2.getInt(6);
            if(rs_tDBInput_2.wasNull()){
                    MATERIAL.ID_FOR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								MATERIAL.COD_LINHA = null;
							} else {
		                          
            MATERIAL.COD_LINHA = rs_tDBInput_2.getInt(7);
            if(rs_tDBInput_2.wasNull()){
                    MATERIAL.COD_LINHA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								MATERIAL.COD_CATEGORIA = null;
							} else {
		                          
            MATERIAL.COD_CATEGORIA = rs_tDBInput_2.getInt(8);
            if(rs_tDBInput_2.wasNull()){
                    MATERIAL.COD_CATEGORIA = null;
            }
		                    }
					





 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_MATERIAL main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_MATERIAL";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"MATERIAL");
					}
					


			   
			   

					MATERIALStruct MATERIAL_HashRow = new MATERIALStruct();
		   	   	   
				
				MATERIAL_HashRow.COD_EMPRESA = MATERIAL.COD_EMPRESA;
				
				MATERIAL_HashRow.COD_MAT = MATERIAL.COD_MAT;
				
				MATERIAL_HashRow.DESCRICAO = MATERIAL.DESCRICAO;
				
				MATERIAL_HashRow.PRECO_UNIT = MATERIAL.PRECO_UNIT;
				
				MATERIAL_HashRow.COD_TIP_MAT = MATERIAL.COD_TIP_MAT;
				
				MATERIAL_HashRow.ID_FOR = MATERIAL.ID_FOR;
				
				MATERIAL_HashRow.COD_LINHA = MATERIAL.COD_LINHA;
				
				MATERIAL_HashRow.COD_CATEGORIA = MATERIAL.COD_CATEGORIA;
				
			tHash_Lookup_MATERIAL.put(MATERIAL_HashRow);
			
            




 


	tos_count_tAdvancedHash_MATERIAL++;

/**
 * [tAdvancedHash_MATERIAL main ] stop
 */
	
	/**
	 * [tAdvancedHash_MATERIAL process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_MATERIAL";

	

 



/**
 * [tAdvancedHash_MATERIAL process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_MATERIAL process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_MATERIAL";

	

 



/**
 * [tAdvancedHash_MATERIAL process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_MATERIAL end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_MATERIAL";

	

tHash_Lookup_MATERIAL.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"MATERIAL");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_MATERIAL", true);
end_Hash.put("tAdvancedHash_MATERIAL", System.currentTimeMillis());




/**
 * [tAdvancedHash_MATERIAL end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_MATERIAL finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_MATERIAL";

	

 



/**
 * [tAdvancedHash_MATERIAL finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class TIPO_MATStruct implements routines.system.IPersistableComparableLookupRow<TIPO_MATStruct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_DIM_MATERIAL = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SK_TIP_MAT;

				public int getSK_TIP_MAT () {
					return this.SK_TIP_MAT;
				}
				
			    public int SK_EMPRESA;

				public int getSK_EMPRESA () {
					return this.SK_EMPRESA;
				}
				
			    public int COD_TIP_MAT;

				public int getCOD_TIP_MAT () {
					return this.COD_TIP_MAT;
				}
				
			    public String DESC_TIP_MAT;

				public String getDESC_TIP_MAT () {
					return this.DESC_TIP_MAT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SK_EMPRESA;
						
							result = prime * result + (int) this.COD_TIP_MAT;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final TIPO_MATStruct other = (TIPO_MATStruct) obj;
		
						if (this.SK_EMPRESA != other.SK_EMPRESA)
							return false;
					
						if (this.COD_TIP_MAT != other.COD_TIP_MAT)
							return false;
					

		return true;
    }

	public void copyDataTo(TIPO_MATStruct other) {

		other.SK_TIP_MAT = this.SK_TIP_MAT;
	            other.SK_EMPRESA = this.SK_EMPRESA;
	            other.COD_TIP_MAT = this.COD_TIP_MAT;
	            other.DESC_TIP_MAT = this.DESC_TIP_MAT;
	            
	}

	public void copyKeysDataTo(TIPO_MATStruct other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            	other.COD_TIP_MAT = this.COD_TIP_MAT;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_DIM_MATERIAL) {

        	try {

        		int length = 0;
		
			        this.SK_EMPRESA = dis.readInt();
					
			        this.COD_TIP_MAT = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.COD_TIP_MAT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.SK_TIP_MAT = dis.readInt();
					
						this.DESC_TIP_MAT = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.SK_TIP_MAT);
					
						writeString(this.DESC_TIP_MAT, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_TIP_MAT="+String.valueOf(SK_TIP_MAT));
		sb.append(",SK_EMPRESA="+String.valueOf(SK_EMPRESA));
		sb.append(",COD_TIP_MAT="+String.valueOf(COD_TIP_MAT));
		sb.append(",DESC_TIP_MAT="+DESC_TIP_MAT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(TIPO_MATStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SK_EMPRESA, other.SK_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.COD_TIP_MAT, other.COD_TIP_MAT);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		TIPO_MATStruct TIPO_MAT = new TIPO_MATStruct();




	
	/**
	 * [tAdvancedHash_TIPO_MAT begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_TIPO_MAT", false);
		start_Hash.put("tAdvancedHash_TIPO_MAT", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_TIPO_MAT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"TIPO_MAT");
					}
				
		int tos_count_tAdvancedHash_TIPO_MAT = 0;
		

			   		// connection name:TIPO_MAT
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_1) outputs:(TIPO_MAT,TIPO_MAT) | target node:tAdvancedHash_TIPO_MAT - inputs:(TIPO_MAT) outputs:()
			   		// linked node: tMap_1 - inputs:(EMPRESA,SUB_CATEGORIA,MATERIAL,TIPO_MAT,LINHA_PRODUTO) outputs:(SAIDA)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_TIPO_MAT = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<TIPO_MATStruct> tHash_Lookup_TIPO_MAT =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<TIPO_MATStruct>getLookup(matchingModeEnum_TIPO_MAT);
	   						   
		   	   	   globalMap.put("tHash_Lookup_TIPO_MAT", tHash_Lookup_TIPO_MAT);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_TIPO_MAT begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_5  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5); 
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "ETLBI";
				
				 
	final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:zIVWr5Bx7w+9xHQ/atySpo4Yn0R/JLEbzYWXvwAbZCzySyoR");
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
		    String port_tDBInput_5 = "1433";
		    String dbname_tDBInput_5 = "DW" ;
			String url_tDBInput_5 = "jdbc:jtds:sqlserver://" + "DESKTOP-SKA0L5T" ;
		    if (!"".equals(port_tDBInput_5)) {
		    	url_tDBInput_5 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_5)) {
				url_tDBInput_5 += "//" + "DW"; 
		    }
		    url_tDBInput_5 += ";appName=" + projectName + ";" + "INSTANCE=OLAP";
		    String dbschema_tDBInput_5 = "dbo";
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT dbo.DIM_TIPO_MAT.SK_TIP_MAT,\n		dbo.DIM_TIPO_MAT.SK_EMPRESA,\n		dbo.DIM_TIPO_MAT.COD_TIP_MAT,\n		dbo.DIM_TIPO_MAT.D"
+"ESC_TIP_MAT\nFROM	dbo.DIM_TIPO_MAT";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								TIPO_MAT.SK_TIP_MAT = 0;
							} else {
		                          
            TIPO_MAT.SK_TIP_MAT = rs_tDBInput_5.getInt(1);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								TIPO_MAT.SK_EMPRESA = 0;
							} else {
		                          
            TIPO_MAT.SK_EMPRESA = rs_tDBInput_5.getInt(2);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								TIPO_MAT.COD_TIP_MAT = 0;
							} else {
		                          
            TIPO_MAT.COD_TIP_MAT = rs_tDBInput_5.getInt(3);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								TIPO_MAT.DESC_TIP_MAT = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(4);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		TIPO_MAT.DESC_TIP_MAT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	TIPO_MAT.DESC_TIP_MAT = tmpContent_tDBInput_5;
                }
            } else {
                TIPO_MAT.DESC_TIP_MAT = null;
            }
		                    }
					





 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_TIPO_MAT main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_TIPO_MAT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"TIPO_MAT");
					}
					


			   
			   

					TIPO_MATStruct TIPO_MAT_HashRow = new TIPO_MATStruct();
		   	   	   
				
				TIPO_MAT_HashRow.SK_TIP_MAT = TIPO_MAT.SK_TIP_MAT;
				
				TIPO_MAT_HashRow.SK_EMPRESA = TIPO_MAT.SK_EMPRESA;
				
				TIPO_MAT_HashRow.COD_TIP_MAT = TIPO_MAT.COD_TIP_MAT;
				
				TIPO_MAT_HashRow.DESC_TIP_MAT = TIPO_MAT.DESC_TIP_MAT;
				
			tHash_Lookup_TIPO_MAT.put(TIPO_MAT_HashRow);
			
            




 


	tos_count_tAdvancedHash_TIPO_MAT++;

/**
 * [tAdvancedHash_TIPO_MAT main ] stop
 */
	
	/**
	 * [tAdvancedHash_TIPO_MAT process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_TIPO_MAT";

	

 



/**
 * [tAdvancedHash_TIPO_MAT process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_TIPO_MAT process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_TIPO_MAT";

	

 



/**
 * [tAdvancedHash_TIPO_MAT process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
		if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
			
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);

 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_TIPO_MAT end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_TIPO_MAT";

	

tHash_Lookup_TIPO_MAT.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"TIPO_MAT");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_TIPO_MAT", true);
end_Hash.put("tAdvancedHash_TIPO_MAT", System.currentTimeMillis());




/**
 * [tAdvancedHash_TIPO_MAT end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_TIPO_MAT finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_TIPO_MAT";

	

 



/**
 * [tAdvancedHash_TIPO_MAT finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class LINHA_PRODUTOStruct implements routines.system.IPersistableComparableLookupRow<LINHA_PRODUTOStruct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_DIM_MATERIAL = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_DIM_MATERIAL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SK_LINHA_PROD;

				public int getSK_LINHA_PROD () {
					return this.SK_LINHA_PROD;
				}
				
			    public int SK_EMPRESA;

				public int getSK_EMPRESA () {
					return this.SK_EMPRESA;
				}
				
			    public int COD_LINHA;

				public int getCOD_LINHA () {
					return this.COD_LINHA;
				}
				
			    public String DESC_LINHA;

				public String getDESC_LINHA () {
					return this.DESC_LINHA;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SK_EMPRESA;
						
							result = prime * result + (int) this.COD_LINHA;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final LINHA_PRODUTOStruct other = (LINHA_PRODUTOStruct) obj;
		
						if (this.SK_EMPRESA != other.SK_EMPRESA)
							return false;
					
						if (this.COD_LINHA != other.COD_LINHA)
							return false;
					

		return true;
    }

	public void copyDataTo(LINHA_PRODUTOStruct other) {

		other.SK_LINHA_PROD = this.SK_LINHA_PROD;
	            other.SK_EMPRESA = this.SK_EMPRESA;
	            other.COD_LINHA = this.COD_LINHA;
	            other.DESC_LINHA = this.DESC_LINHA;
	            
	}

	public void copyKeysDataTo(LINHA_PRODUTOStruct other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            	other.COD_LINHA = this.COD_LINHA;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_DIM_MATERIAL) {

        	try {

        		int length = 0;
		
			        this.SK_EMPRESA = dis.readInt();
					
			        this.COD_LINHA = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.COD_LINHA);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.SK_LINHA_PROD = dis.readInt();
					
						this.DESC_LINHA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.SK_LINHA_PROD);
					
						writeString(this.DESC_LINHA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_LINHA_PROD="+String.valueOf(SK_LINHA_PROD));
		sb.append(",SK_EMPRESA="+String.valueOf(SK_EMPRESA));
		sb.append(",COD_LINHA="+String.valueOf(COD_LINHA));
		sb.append(",DESC_LINHA="+DESC_LINHA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(LINHA_PRODUTOStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SK_EMPRESA, other.SK_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.COD_LINHA, other.COD_LINHA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		LINHA_PRODUTOStruct LINHA_PRODUTO = new LINHA_PRODUTOStruct();




	
	/**
	 * [tAdvancedHash_LINHA_PRODUTO begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_LINHA_PRODUTO", false);
		start_Hash.put("tAdvancedHash_LINHA_PRODUTO", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_LINHA_PRODUTO";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"LINHA_PRODUTO");
					}
				
		int tos_count_tAdvancedHash_LINHA_PRODUTO = 0;
		

			   		// connection name:LINHA_PRODUTO
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_1) outputs:(LINHA_PRODUTO,LINHA_PRODUTO) | target node:tAdvancedHash_LINHA_PRODUTO - inputs:(LINHA_PRODUTO) outputs:()
			   		// linked node: tMap_1 - inputs:(EMPRESA,SUB_CATEGORIA,MATERIAL,TIPO_MAT,LINHA_PRODUTO) outputs:(SAIDA)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_LINHA_PRODUTO = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<LINHA_PRODUTOStruct> tHash_Lookup_LINHA_PRODUTO =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<LINHA_PRODUTOStruct>getLookup(matchingModeEnum_LINHA_PRODUTO);
	   						   
		   	   	   globalMap.put("tHash_Lookup_LINHA_PRODUTO", tHash_Lookup_LINHA_PRODUTO);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_LINHA_PRODUTO begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_3  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3); 
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "ETLBI";
				
				 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:fmAKgJ+J2eSDYV14kI6DR+m+44x/67TLDs7Fyzf91wxWpHd0");
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
		    String port_tDBInput_3 = "1433";
		    String dbname_tDBInput_3 = "DW" ;
			String url_tDBInput_3 = "jdbc:jtds:sqlserver://" + "DESKTOP-SKA0L5T" ;
		    if (!"".equals(port_tDBInput_3)) {
		    	url_tDBInput_3 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_3)) {
				url_tDBInput_3 += "//" + "DW"; 
		    }
		    url_tDBInput_3 += ";appName=" + projectName + ";" + "INSTANCE=OLAP";
		    String dbschema_tDBInput_3 = "dbo";
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT dbo.DIM_LINHA_PRODUTO.SK_LINHA_PROD,\n		dbo.DIM_LINHA_PRODUTO.SK_EMPRESA,\n		dbo.DIM_LINHA_PRODUTO.COD_LINHA,\n		db"
+"o.DIM_LINHA_PRODUTO.DESC_LINHA\nFROM	dbo.DIM_LINHA_PRODUTO";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								LINHA_PRODUTO.SK_LINHA_PROD = 0;
							} else {
		                          
            LINHA_PRODUTO.SK_LINHA_PROD = rs_tDBInput_3.getInt(1);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								LINHA_PRODUTO.SK_EMPRESA = 0;
							} else {
		                          
            LINHA_PRODUTO.SK_EMPRESA = rs_tDBInput_3.getInt(2);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								LINHA_PRODUTO.COD_LINHA = 0;
							} else {
		                          
            LINHA_PRODUTO.COD_LINHA = rs_tDBInput_3.getInt(3);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								LINHA_PRODUTO.DESC_LINHA = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(4);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		LINHA_PRODUTO.DESC_LINHA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	LINHA_PRODUTO.DESC_LINHA = tmpContent_tDBInput_3;
                }
            } else {
                LINHA_PRODUTO.DESC_LINHA = null;
            }
		                    }
					





 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_LINHA_PRODUTO main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_LINHA_PRODUTO";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"LINHA_PRODUTO");
					}
					


			   
			   

					LINHA_PRODUTOStruct LINHA_PRODUTO_HashRow = new LINHA_PRODUTOStruct();
		   	   	   
				
				LINHA_PRODUTO_HashRow.SK_LINHA_PROD = LINHA_PRODUTO.SK_LINHA_PROD;
				
				LINHA_PRODUTO_HashRow.SK_EMPRESA = LINHA_PRODUTO.SK_EMPRESA;
				
				LINHA_PRODUTO_HashRow.COD_LINHA = LINHA_PRODUTO.COD_LINHA;
				
				LINHA_PRODUTO_HashRow.DESC_LINHA = LINHA_PRODUTO.DESC_LINHA;
				
			tHash_Lookup_LINHA_PRODUTO.put(LINHA_PRODUTO_HashRow);
			
            




 


	tos_count_tAdvancedHash_LINHA_PRODUTO++;

/**
 * [tAdvancedHash_LINHA_PRODUTO main ] stop
 */
	
	/**
	 * [tAdvancedHash_LINHA_PRODUTO process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_LINHA_PRODUTO";

	

 



/**
 * [tAdvancedHash_LINHA_PRODUTO process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_LINHA_PRODUTO process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_LINHA_PRODUTO";

	

 



/**
 * [tAdvancedHash_LINHA_PRODUTO process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_LINHA_PRODUTO end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_LINHA_PRODUTO";

	

tHash_Lookup_LINHA_PRODUTO.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"LINHA_PRODUTO");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_LINHA_PRODUTO", true);
end_Hash.put("tAdvancedHash_LINHA_PRODUTO", System.currentTimeMillis());




/**
 * [tAdvancedHash_LINHA_PRODUTO end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_LINHA_PRODUTO finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_LINHA_PRODUTO";

	

 



/**
 * [tAdvancedHash_LINHA_PRODUTO finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final CARGA_DIM_MATERIAL CARGA_DIM_MATERIALClass = new CARGA_DIM_MATERIAL();

        int exitCode = CARGA_DIM_MATERIALClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = CARGA_DIM_MATERIAL.class.getClassLoader().getResourceAsStream("bi_forest/carga_dim_material_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = CARGA_DIM_MATERIAL.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : CARGA_DIM_MATERIAL");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     183217 characters generated by Talend Open Studio for Data Integration 
 *     on the 19 de Maio de 2024 22h4min5s BRT
 ************************************************************************************************/