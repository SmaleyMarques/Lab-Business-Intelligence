// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package bi_forest.carga_fato_venda_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: CARGA_FATO_VENDA Purpose: <br>
 * Description: REGISTRO DE FATO DE VENDAS <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class CARGA_FATO_VENDA implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "CARGA_FATO_VENDA";
	private final String projectName = "BI_FOREST";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				CARGA_FATO_VENDA.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(CARGA_FATO_VENDA.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_NOTA_FISCAL_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ITEM_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_CLIENTES_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_MATERIAL_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_FATO_VENDA = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_FATO_VENDA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SK_EMPRESA;

				public int getSK_EMPRESA () {
					return this.SK_EMPRESA;
				}
				
			    public int NUM_NF;

				public int getNUM_NF () {
					return this.NUM_NF;
				}
				
			    public String TIP_NF;

				public String getTIP_NF () {
					return this.TIP_NF;
				}
				
			    public String COD_CFOP;

				public String getCOD_CFOP () {
					return this.COD_CFOP;
				}
				
			    public int SK_CLIENTE;

				public int getSK_CLIENTE () {
					return this.SK_CLIENTE;
				}
				
			    public int COD_PAGTO;

				public int getCOD_PAGTO () {
					return this.COD_PAGTO;
				}
				
			    public java.util.Date DATA_EMISSAO;

				public java.util.Date getDATA_EMISSAO () {
					return this.DATA_EMISSAO;
				}
				
			    public java.util.Date DATA_ENTREGA;

				public java.util.Date getDATA_ENTREGA () {
					return this.DATA_ENTREGA;
				}
				
			    public BigDecimal TOTAL_NF;

				public BigDecimal getTOTAL_NF () {
					return this.TOTAL_NF;
				}
				
			    public int SEQ_MAT;

				public int getSEQ_MAT () {
					return this.SEQ_MAT;
				}
				
			    public int SK_MAT;

				public int getSK_MAT () {
					return this.SK_MAT;
				}
				
			    public BigDecimal QTD;

				public BigDecimal getQTD () {
					return this.QTD;
				}
				
			    public BigDecimal VAL_UNIT;

				public BigDecimal getVAL_UNIT () {
					return this.VAL_UNIT;
				}
				
			    public BigDecimal VAL_CUSTO;

				public BigDecimal getVAL_CUSTO () {
					return this.VAL_CUSTO;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SK_EMPRESA;
						
							result = prime * result + (int) this.NUM_NF;
						
							result = prime * result + (int) this.SEQ_MAT;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.SK_EMPRESA != other.SK_EMPRESA)
							return false;
					
						if (this.NUM_NF != other.NUM_NF)
							return false;
					
						if (this.SEQ_MAT != other.SEQ_MAT)
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            other.NUM_NF = this.NUM_NF;
	            other.TIP_NF = this.TIP_NF;
	            other.COD_CFOP = this.COD_CFOP;
	            other.SK_CLIENTE = this.SK_CLIENTE;
	            other.COD_PAGTO = this.COD_PAGTO;
	            other.DATA_EMISSAO = this.DATA_EMISSAO;
	            other.DATA_ENTREGA = this.DATA_ENTREGA;
	            other.TOTAL_NF = this.TOTAL_NF;
	            other.SEQ_MAT = this.SEQ_MAT;
	            other.SK_MAT = this.SK_MAT;
	            other.QTD = this.QTD;
	            other.VAL_UNIT = this.VAL_UNIT;
	            other.VAL_CUSTO = this.VAL_CUSTO;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            	other.NUM_NF = this.NUM_NF;
	            	other.SEQ_MAT = this.SEQ_MAT;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BI_FOREST_CARGA_FATO_VENDA.length) {
				if(length < 1024 && commonByteArray_BI_FOREST_CARGA_FATO_VENDA.length == 0) {
   					commonByteArray_BI_FOREST_CARGA_FATO_VENDA = new byte[1024];
				} else {
   					commonByteArray_BI_FOREST_CARGA_FATO_VENDA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BI_FOREST_CARGA_FATO_VENDA, 0, length);
			strReturn = new String(commonByteArray_BI_FOREST_CARGA_FATO_VENDA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_FATO_VENDA) {

        	try {

        		int length = 0;
		
			        this.SK_EMPRESA = dis.readInt();
					
			        this.NUM_NF = dis.readInt();
					
					this.TIP_NF = readString(dis);
					
					this.COD_CFOP = readString(dis);
					
			        this.SK_CLIENTE = dis.readInt();
					
			        this.COD_PAGTO = dis.readInt();
					
					this.DATA_EMISSAO = readDate(dis);
					
					this.DATA_ENTREGA = readDate(dis);
					
						this.TOTAL_NF = (BigDecimal) dis.readObject();
					
			        this.SEQ_MAT = dis.readInt();
					
			        this.SK_MAT = dis.readInt();
					
						this.QTD = (BigDecimal) dis.readObject();
					
						this.VAL_UNIT = (BigDecimal) dis.readObject();
					
						this.VAL_CUSTO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.NUM_NF);
					
					// String
				
						writeString(this.TIP_NF,dos);
					
					// String
				
						writeString(this.COD_CFOP,dos);
					
					// int
				
		            	dos.writeInt(this.SK_CLIENTE);
					
					// int
				
		            	dos.writeInt(this.COD_PAGTO);
					
					// java.util.Date
				
						writeDate(this.DATA_EMISSAO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ENTREGA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_NF);
					
					// int
				
		            	dos.writeInt(this.SEQ_MAT);
					
					// int
				
		            	dos.writeInt(this.SK_MAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAL_UNIT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAL_CUSTO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_EMPRESA="+String.valueOf(SK_EMPRESA));
		sb.append(",NUM_NF="+String.valueOf(NUM_NF));
		sb.append(",TIP_NF="+TIP_NF);
		sb.append(",COD_CFOP="+COD_CFOP);
		sb.append(",SK_CLIENTE="+String.valueOf(SK_CLIENTE));
		sb.append(",COD_PAGTO="+String.valueOf(COD_PAGTO));
		sb.append(",DATA_EMISSAO="+String.valueOf(DATA_EMISSAO));
		sb.append(",DATA_ENTREGA="+String.valueOf(DATA_ENTREGA));
		sb.append(",TOTAL_NF="+String.valueOf(TOTAL_NF));
		sb.append(",SEQ_MAT="+String.valueOf(SEQ_MAT));
		sb.append(",SK_MAT="+String.valueOf(SK_MAT));
		sb.append(",QTD="+String.valueOf(QTD));
		sb.append(",VAL_UNIT="+String.valueOf(VAL_UNIT));
		sb.append(",VAL_CUSTO="+String.valueOf(VAL_CUSTO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SK_EMPRESA, other.SK_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NUM_NF, other.NUM_NF);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SEQ_MAT, other.SEQ_MAT);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_FATO_VENDA = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_FATO_VENDA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SK_EMPRESA;

				public int getSK_EMPRESA () {
					return this.SK_EMPRESA;
				}
				
			    public int NUM_NF;

				public int getNUM_NF () {
					return this.NUM_NF;
				}
				
			    public String TIP_NF;

				public String getTIP_NF () {
					return this.TIP_NF;
				}
				
			    public String COD_CFOP;

				public String getCOD_CFOP () {
					return this.COD_CFOP;
				}
				
			    public int SK_CLIENTE;

				public int getSK_CLIENTE () {
					return this.SK_CLIENTE;
				}
				
			    public int COD_PAGTO;

				public int getCOD_PAGTO () {
					return this.COD_PAGTO;
				}
				
			    public java.util.Date DATA_EMISSAO;

				public java.util.Date getDATA_EMISSAO () {
					return this.DATA_EMISSAO;
				}
				
			    public java.util.Date DATA_ENTREGA;

				public java.util.Date getDATA_ENTREGA () {
					return this.DATA_ENTREGA;
				}
				
			    public BigDecimal TOTAL_NF;

				public BigDecimal getTOTAL_NF () {
					return this.TOTAL_NF;
				}
				
			    public int SEQ_MAT;

				public int getSEQ_MAT () {
					return this.SEQ_MAT;
				}
				
			    public int SK_MAT;

				public int getSK_MAT () {
					return this.SK_MAT;
				}
				
			    public BigDecimal QTD;

				public BigDecimal getQTD () {
					return this.QTD;
				}
				
			    public BigDecimal VAL_UNIT;

				public BigDecimal getVAL_UNIT () {
					return this.VAL_UNIT;
				}
				
			    public BigDecimal VAL_CUSTO;

				public BigDecimal getVAL_CUSTO () {
					return this.VAL_CUSTO;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SK_EMPRESA;
						
							result = prime * result + (int) this.NUM_NF;
						
							result = prime * result + (int) this.SEQ_MAT;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OnRowsEndStructtAggregateRow_1 other = (OnRowsEndStructtAggregateRow_1) obj;
		
						if (this.SK_EMPRESA != other.SK_EMPRESA)
							return false;
					
						if (this.NUM_NF != other.NUM_NF)
							return false;
					
						if (this.SEQ_MAT != other.SEQ_MAT)
							return false;
					

		return true;
    }

	public void copyDataTo(OnRowsEndStructtAggregateRow_1 other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            other.NUM_NF = this.NUM_NF;
	            other.TIP_NF = this.TIP_NF;
	            other.COD_CFOP = this.COD_CFOP;
	            other.SK_CLIENTE = this.SK_CLIENTE;
	            other.COD_PAGTO = this.COD_PAGTO;
	            other.DATA_EMISSAO = this.DATA_EMISSAO;
	            other.DATA_ENTREGA = this.DATA_ENTREGA;
	            other.TOTAL_NF = this.TOTAL_NF;
	            other.SEQ_MAT = this.SEQ_MAT;
	            other.SK_MAT = this.SK_MAT;
	            other.QTD = this.QTD;
	            other.VAL_UNIT = this.VAL_UNIT;
	            other.VAL_CUSTO = this.VAL_CUSTO;
	            
	}

	public void copyKeysDataTo(OnRowsEndStructtAggregateRow_1 other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            	other.NUM_NF = this.NUM_NF;
	            	other.SEQ_MAT = this.SEQ_MAT;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BI_FOREST_CARGA_FATO_VENDA.length) {
				if(length < 1024 && commonByteArray_BI_FOREST_CARGA_FATO_VENDA.length == 0) {
   					commonByteArray_BI_FOREST_CARGA_FATO_VENDA = new byte[1024];
				} else {
   					commonByteArray_BI_FOREST_CARGA_FATO_VENDA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BI_FOREST_CARGA_FATO_VENDA, 0, length);
			strReturn = new String(commonByteArray_BI_FOREST_CARGA_FATO_VENDA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_FATO_VENDA) {

        	try {

        		int length = 0;
		
			        this.SK_EMPRESA = dis.readInt();
					
			        this.NUM_NF = dis.readInt();
					
					this.TIP_NF = readString(dis);
					
					this.COD_CFOP = readString(dis);
					
			        this.SK_CLIENTE = dis.readInt();
					
			        this.COD_PAGTO = dis.readInt();
					
					this.DATA_EMISSAO = readDate(dis);
					
					this.DATA_ENTREGA = readDate(dis);
					
						this.TOTAL_NF = (BigDecimal) dis.readObject();
					
			        this.SEQ_MAT = dis.readInt();
					
			        this.SK_MAT = dis.readInt();
					
						this.QTD = (BigDecimal) dis.readObject();
					
						this.VAL_UNIT = (BigDecimal) dis.readObject();
					
						this.VAL_CUSTO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.NUM_NF);
					
					// String
				
						writeString(this.TIP_NF,dos);
					
					// String
				
						writeString(this.COD_CFOP,dos);
					
					// int
				
		            	dos.writeInt(this.SK_CLIENTE);
					
					// int
				
		            	dos.writeInt(this.COD_PAGTO);
					
					// java.util.Date
				
						writeDate(this.DATA_EMISSAO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ENTREGA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_NF);
					
					// int
				
		            	dos.writeInt(this.SEQ_MAT);
					
					// int
				
		            	dos.writeInt(this.SK_MAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAL_UNIT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAL_CUSTO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_EMPRESA="+String.valueOf(SK_EMPRESA));
		sb.append(",NUM_NF="+String.valueOf(NUM_NF));
		sb.append(",TIP_NF="+TIP_NF);
		sb.append(",COD_CFOP="+COD_CFOP);
		sb.append(",SK_CLIENTE="+String.valueOf(SK_CLIENTE));
		sb.append(",COD_PAGTO="+String.valueOf(COD_PAGTO));
		sb.append(",DATA_EMISSAO="+String.valueOf(DATA_EMISSAO));
		sb.append(",DATA_ENTREGA="+String.valueOf(DATA_ENTREGA));
		sb.append(",TOTAL_NF="+String.valueOf(TOTAL_NF));
		sb.append(",SEQ_MAT="+String.valueOf(SEQ_MAT));
		sb.append(",SK_MAT="+String.valueOf(SK_MAT));
		sb.append(",QTD="+String.valueOf(QTD));
		sb.append(",VAL_UNIT="+String.valueOf(VAL_UNIT));
		sb.append(",VAL_CUSTO="+String.valueOf(VAL_CUSTO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SK_EMPRESA, other.SK_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NUM_NF, other.NUM_NF);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SEQ_MAT, other.SEQ_MAT);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class SAIDAStruct implements routines.system.IPersistableRow<SAIDAStruct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_FATO_VENDA = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_FATO_VENDA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SK_EMPRESA;

				public int getSK_EMPRESA () {
					return this.SK_EMPRESA;
				}
				
			    public int NUM_NF;

				public int getNUM_NF () {
					return this.NUM_NF;
				}
				
			    public String TIP_NF;

				public String getTIP_NF () {
					return this.TIP_NF;
				}
				
			    public String COD_CFOP;

				public String getCOD_CFOP () {
					return this.COD_CFOP;
				}
				
			    public int SK_CLIENTE;

				public int getSK_CLIENTE () {
					return this.SK_CLIENTE;
				}
				
			    public int COD_PAGTO;

				public int getCOD_PAGTO () {
					return this.COD_PAGTO;
				}
				
			    public java.util.Date DATA_EMISSAO;

				public java.util.Date getDATA_EMISSAO () {
					return this.DATA_EMISSAO;
				}
				
			    public java.util.Date DATA_ENTREGA;

				public java.util.Date getDATA_ENTREGA () {
					return this.DATA_ENTREGA;
				}
				
			    public BigDecimal TOTAL_NF;

				public BigDecimal getTOTAL_NF () {
					return this.TOTAL_NF;
				}
				
			    public int SEQ_MAT;

				public int getSEQ_MAT () {
					return this.SEQ_MAT;
				}
				
			    public int SK_MAT;

				public int getSK_MAT () {
					return this.SK_MAT;
				}
				
			    public BigDecimal QTD;

				public BigDecimal getQTD () {
					return this.QTD;
				}
				
			    public BigDecimal VAL_UNIT;

				public BigDecimal getVAL_UNIT () {
					return this.VAL_UNIT;
				}
				
			    public BigDecimal VAL_CUSTO;

				public BigDecimal getVAL_CUSTO () {
					return this.VAL_CUSTO;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SK_EMPRESA;
						
							result = prime * result + (int) this.NUM_NF;
						
							result = prime * result + (int) this.SEQ_MAT;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final SAIDAStruct other = (SAIDAStruct) obj;
		
						if (this.SK_EMPRESA != other.SK_EMPRESA)
							return false;
					
						if (this.NUM_NF != other.NUM_NF)
							return false;
					
						if (this.SEQ_MAT != other.SEQ_MAT)
							return false;
					

		return true;
    }

	public void copyDataTo(SAIDAStruct other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            other.NUM_NF = this.NUM_NF;
	            other.TIP_NF = this.TIP_NF;
	            other.COD_CFOP = this.COD_CFOP;
	            other.SK_CLIENTE = this.SK_CLIENTE;
	            other.COD_PAGTO = this.COD_PAGTO;
	            other.DATA_EMISSAO = this.DATA_EMISSAO;
	            other.DATA_ENTREGA = this.DATA_ENTREGA;
	            other.TOTAL_NF = this.TOTAL_NF;
	            other.SEQ_MAT = this.SEQ_MAT;
	            other.SK_MAT = this.SK_MAT;
	            other.QTD = this.QTD;
	            other.VAL_UNIT = this.VAL_UNIT;
	            other.VAL_CUSTO = this.VAL_CUSTO;
	            
	}

	public void copyKeysDataTo(SAIDAStruct other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            	other.NUM_NF = this.NUM_NF;
	            	other.SEQ_MAT = this.SEQ_MAT;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BI_FOREST_CARGA_FATO_VENDA.length) {
				if(length < 1024 && commonByteArray_BI_FOREST_CARGA_FATO_VENDA.length == 0) {
   					commonByteArray_BI_FOREST_CARGA_FATO_VENDA = new byte[1024];
				} else {
   					commonByteArray_BI_FOREST_CARGA_FATO_VENDA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BI_FOREST_CARGA_FATO_VENDA, 0, length);
			strReturn = new String(commonByteArray_BI_FOREST_CARGA_FATO_VENDA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_FATO_VENDA) {

        	try {

        		int length = 0;
		
			        this.SK_EMPRESA = dis.readInt();
					
			        this.NUM_NF = dis.readInt();
					
					this.TIP_NF = readString(dis);
					
					this.COD_CFOP = readString(dis);
					
			        this.SK_CLIENTE = dis.readInt();
					
			        this.COD_PAGTO = dis.readInt();
					
					this.DATA_EMISSAO = readDate(dis);
					
					this.DATA_ENTREGA = readDate(dis);
					
						this.TOTAL_NF = (BigDecimal) dis.readObject();
					
			        this.SEQ_MAT = dis.readInt();
					
			        this.SK_MAT = dis.readInt();
					
						this.QTD = (BigDecimal) dis.readObject();
					
						this.VAL_UNIT = (BigDecimal) dis.readObject();
					
						this.VAL_CUSTO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.NUM_NF);
					
					// String
				
						writeString(this.TIP_NF,dos);
					
					// String
				
						writeString(this.COD_CFOP,dos);
					
					// int
				
		            	dos.writeInt(this.SK_CLIENTE);
					
					// int
				
		            	dos.writeInt(this.COD_PAGTO);
					
					// java.util.Date
				
						writeDate(this.DATA_EMISSAO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ENTREGA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_NF);
					
					// int
				
		            	dos.writeInt(this.SEQ_MAT);
					
					// int
				
		            	dos.writeInt(this.SK_MAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAL_UNIT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAL_CUSTO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_EMPRESA="+String.valueOf(SK_EMPRESA));
		sb.append(",NUM_NF="+String.valueOf(NUM_NF));
		sb.append(",TIP_NF="+TIP_NF);
		sb.append(",COD_CFOP="+COD_CFOP);
		sb.append(",SK_CLIENTE="+String.valueOf(SK_CLIENTE));
		sb.append(",COD_PAGTO="+String.valueOf(COD_PAGTO));
		sb.append(",DATA_EMISSAO="+String.valueOf(DATA_EMISSAO));
		sb.append(",DATA_ENTREGA="+String.valueOf(DATA_ENTREGA));
		sb.append(",TOTAL_NF="+String.valueOf(TOTAL_NF));
		sb.append(",SEQ_MAT="+String.valueOf(SEQ_MAT));
		sb.append(",SK_MAT="+String.valueOf(SK_MAT));
		sb.append(",QTD="+String.valueOf(QTD));
		sb.append(",VAL_UNIT="+String.valueOf(VAL_UNIT));
		sb.append(",VAL_CUSTO="+String.valueOf(VAL_CUSTO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(SAIDAStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SK_EMPRESA, other.SK_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NUM_NF, other.NUM_NF);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SEQ_MAT, other.SEQ_MAT);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EMPRESAStruct implements routines.system.IPersistableRow<EMPRESAStruct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_FATO_VENDA = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_FATO_VENDA = new byte[0];

	
			    public int SK_EMPRESA;

				public int getSK_EMPRESA () {
					return this.SK_EMPRESA;
				}
				
			    public int COD_EMPRESA;

				public int getCOD_EMPRESA () {
					return this.COD_EMPRESA;
				}
				
			    public String NOME_EMPRESA;

				public String getNOME_EMPRESA () {
					return this.NOME_EMPRESA;
				}
				
			    public String FANTASIA;

				public String getFANTASIA () {
					return this.FANTASIA;
				}
				
			    public String CNPJ;

				public String getCNPJ () {
					return this.CNPJ;
				}
				
			    public String ENDERECO;

				public String getENDERECO () {
					return this.ENDERECO;
				}
				
			    public String COD_CIDADE;

				public String getCOD_CIDADE () {
					return this.COD_CIDADE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BI_FOREST_CARGA_FATO_VENDA.length) {
				if(length < 1024 && commonByteArray_BI_FOREST_CARGA_FATO_VENDA.length == 0) {
   					commonByteArray_BI_FOREST_CARGA_FATO_VENDA = new byte[1024];
				} else {
   					commonByteArray_BI_FOREST_CARGA_FATO_VENDA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BI_FOREST_CARGA_FATO_VENDA, 0, length);
			strReturn = new String(commonByteArray_BI_FOREST_CARGA_FATO_VENDA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_FATO_VENDA) {

        	try {

        		int length = 0;
		
			        this.SK_EMPRESA = dis.readInt();
					
			        this.COD_EMPRESA = dis.readInt();
					
					this.NOME_EMPRESA = readString(dis);
					
					this.FANTASIA = readString(dis);
					
					this.CNPJ = readString(dis);
					
					this.ENDERECO = readString(dis);
					
					this.COD_CIDADE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.COD_EMPRESA);
					
					// String
				
						writeString(this.NOME_EMPRESA,dos);
					
					// String
				
						writeString(this.FANTASIA,dos);
					
					// String
				
						writeString(this.CNPJ,dos);
					
					// String
				
						writeString(this.ENDERECO,dos);
					
					// String
				
						writeString(this.COD_CIDADE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_EMPRESA="+String.valueOf(SK_EMPRESA));
		sb.append(",COD_EMPRESA="+String.valueOf(COD_EMPRESA));
		sb.append(",NOME_EMPRESA="+NOME_EMPRESA);
		sb.append(",FANTASIA="+FANTASIA);
		sb.append(",CNPJ="+CNPJ);
		sb.append(",ENDERECO="+ENDERECO);
		sb.append(",COD_CIDADE="+COD_CIDADE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(EMPRESAStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_FATO_VENDA = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_FATO_VENDA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SK_EMPRESA;

				public int getSK_EMPRESA () {
					return this.SK_EMPRESA;
				}
				
			    public int COD_EMPRESA;

				public int getCOD_EMPRESA () {
					return this.COD_EMPRESA;
				}
				
			    public String NOME_EMPRESA;

				public String getNOME_EMPRESA () {
					return this.NOME_EMPRESA;
				}
				
			    public String FANTASIA;

				public String getFANTASIA () {
					return this.FANTASIA;
				}
				
			    public String CNPJ;

				public String getCNPJ () {
					return this.CNPJ;
				}
				
			    public String ENDERECO;

				public String getENDERECO () {
					return this.ENDERECO;
				}
				
			    public String COD_CIDADE;

				public String getCOD_CIDADE () {
					return this.COD_CIDADE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SK_EMPRESA;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_1Struct other = (after_tDBInput_1Struct) obj;
		
						if (this.SK_EMPRESA != other.SK_EMPRESA)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_1Struct other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            other.COD_EMPRESA = this.COD_EMPRESA;
	            other.NOME_EMPRESA = this.NOME_EMPRESA;
	            other.FANTASIA = this.FANTASIA;
	            other.CNPJ = this.CNPJ;
	            other.ENDERECO = this.ENDERECO;
	            other.COD_CIDADE = this.COD_CIDADE;
	            
	}

	public void copyKeysDataTo(after_tDBInput_1Struct other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BI_FOREST_CARGA_FATO_VENDA.length) {
				if(length < 1024 && commonByteArray_BI_FOREST_CARGA_FATO_VENDA.length == 0) {
   					commonByteArray_BI_FOREST_CARGA_FATO_VENDA = new byte[1024];
				} else {
   					commonByteArray_BI_FOREST_CARGA_FATO_VENDA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BI_FOREST_CARGA_FATO_VENDA, 0, length);
			strReturn = new String(commonByteArray_BI_FOREST_CARGA_FATO_VENDA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_FATO_VENDA) {

        	try {

        		int length = 0;
		
			        this.SK_EMPRESA = dis.readInt();
					
			        this.COD_EMPRESA = dis.readInt();
					
					this.NOME_EMPRESA = readString(dis);
					
					this.FANTASIA = readString(dis);
					
					this.CNPJ = readString(dis);
					
					this.ENDERECO = readString(dis);
					
					this.COD_CIDADE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.COD_EMPRESA);
					
					// String
				
						writeString(this.NOME_EMPRESA,dos);
					
					// String
				
						writeString(this.FANTASIA,dos);
					
					// String
				
						writeString(this.CNPJ,dos);
					
					// String
				
						writeString(this.ENDERECO,dos);
					
					// String
				
						writeString(this.COD_CIDADE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_EMPRESA="+String.valueOf(SK_EMPRESA));
		sb.append(",COD_EMPRESA="+String.valueOf(COD_EMPRESA));
		sb.append(",NOME_EMPRESA="+NOME_EMPRESA);
		sb.append(",FANTASIA="+FANTASIA);
		sb.append(",CNPJ="+CNPJ);
		sb.append(",ENDERECO="+ENDERECO);
		sb.append(",COD_CIDADE="+COD_CIDADE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SK_EMPRESA, other.SK_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);
		tDBInput_3Process(globalMap);
		tDBInput_4Process(globalMap);
		tDBInput_5Process(globalMap);

		EMPRESAStruct EMPRESA = new EMPRESAStruct();
SAIDAStruct SAIDA = new SAIDAStruct();
row1Struct row1 = new row1Struct();





	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"SAIDA");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------
	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				int SK_EMPRESA;
    				int NUM_NF;
    				String TIP_NF;
    				String COD_CFOP;
    				int SK_CLIENTE;
    				int COD_PAGTO;
    				java.util.Date DATA_EMISSAO;
    				java.util.Date DATA_ENTREGA;
    				BigDecimal TOTAL_NF;
    				int SEQ_MAT;
    				int SK_MAT;
    				BigDecimal QTD;
    				BigDecimal VAL_UNIT;
    				BigDecimal VAL_CUSTO;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
								result = prime * result + (int) this.SK_EMPRESA;
							
								result = prime * result + (int) this.NUM_NF;
							
							result = prime * result + ((this.TIP_NF == null) ? 0 : this.TIP_NF.hashCode());
							
							result = prime * result + ((this.COD_CFOP == null) ? 0 : this.COD_CFOP.hashCode());
							
								result = prime * result + (int) this.SK_CLIENTE;
							
								result = prime * result + (int) this.COD_PAGTO;
							
							result = prime * result + ((this.DATA_EMISSAO == null) ? 0 : this.DATA_EMISSAO.hashCode());
							
							result = prime * result + ((this.DATA_ENTREGA == null) ? 0 : this.DATA_ENTREGA.hashCode());
							
							result = prime * result + ((this.TOTAL_NF == null) ? 0 : this.TOTAL_NF.hashCode());
							
								result = prime * result + (int) this.SEQ_MAT;
							
								result = prime * result + (int) this.SK_MAT;
							
							result = prime * result + ((this.QTD == null) ? 0 : this.QTD.hashCode());
							
							result = prime * result + ((this.VAL_UNIT == null) ? 0 : this.VAL_UNIT.hashCode());
							
							result = prime * result + ((this.VAL_CUSTO == null) ? 0 : this.VAL_CUSTO.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.SK_EMPRESA != other.SK_EMPRESA) 
								return false;
						
							if (this.NUM_NF != other.NUM_NF) 
								return false;
						
							if (this.TIP_NF == null) {
								if (other.TIP_NF != null) 
									return false;
							} else if (!this.TIP_NF.equals(other.TIP_NF)) 
								return false;
						
							if (this.COD_CFOP == null) {
								if (other.COD_CFOP != null) 
									return false;
							} else if (!this.COD_CFOP.equals(other.COD_CFOP)) 
								return false;
						
							if (this.SK_CLIENTE != other.SK_CLIENTE) 
								return false;
						
							if (this.COD_PAGTO != other.COD_PAGTO) 
								return false;
						
							if (this.DATA_EMISSAO == null) {
								if (other.DATA_EMISSAO != null) 
									return false;
							} else if (!this.DATA_EMISSAO.equals(other.DATA_EMISSAO)) 
								return false;
						
							if (this.DATA_ENTREGA == null) {
								if (other.DATA_ENTREGA != null) 
									return false;
							} else if (!this.DATA_ENTREGA.equals(other.DATA_ENTREGA)) 
								return false;
						
							if (this.TOTAL_NF == null) {
								if (other.TOTAL_NF != null) 
									return false;
							} else if (!this.TOTAL_NF.equals(other.TOTAL_NF)) 
								return false;
						
							if (this.SEQ_MAT != other.SEQ_MAT) 
								return false;
						
							if (this.SK_MAT != other.SK_MAT) 
								return false;
						
							if (this.QTD == null) {
								if (other.QTD != null) 
									return false;
							} else if (!this.QTD.equals(other.QTD)) 
								return false;
						
							if (this.VAL_UNIT == null) {
								if (other.VAL_UNIT != null) 
									return false;
							} else if (!this.VAL_UNIT.equals(other.VAL_UNIT)) 
								return false;
						
							if (this.VAL_CUSTO == null) {
								if (other.VAL_CUSTO != null) 
									return false;
							} else if (!this.VAL_CUSTO.equals(other.VAL_CUSTO)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"EMPRESA");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<NOTA_FISCALStruct> tHash_Lookup_NOTA_FISCAL = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<NOTA_FISCALStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<NOTA_FISCALStruct>) 
					globalMap.get( "tHash_Lookup_NOTA_FISCAL" ))
					;					
					
	

NOTA_FISCALStruct NOTA_FISCALHashKey = new NOTA_FISCALStruct();
NOTA_FISCALStruct NOTA_FISCALDefault = new NOTA_FISCALStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ITEMStruct> tHash_Lookup_ITEM = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ITEMStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ITEMStruct>) 
					globalMap.get( "tHash_Lookup_ITEM" ))
					;					
					
	

ITEMStruct ITEMHashKey = new ITEMStruct();
ITEMStruct ITEMDefault = new ITEMStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CLIENTESStruct> tHash_Lookup_CLIENTES = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CLIENTESStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CLIENTESStruct>) 
					globalMap.get( "tHash_Lookup_CLIENTES" ))
					;					
					
	

CLIENTESStruct CLIENTESHashKey = new CLIENTESStruct();
CLIENTESStruct CLIENTESDefault = new CLIENTESStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<MATERIALStruct> tHash_Lookup_MATERIAL = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<MATERIALStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<MATERIALStruct>) 
					globalMap.get( "tHash_Lookup_MATERIAL" ))
					;					
					
	

MATERIALStruct MATERIALHashKey = new MATERIALStruct();
MATERIALStruct MATERIALDefault = new MATERIALStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
SAIDAStruct SAIDA_tmp = new SAIDAStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "ETLBI";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:irgS4XQo4xJ6NA9XbCk659zI1mtTiFqJDwixRxHT4q9Pamoi");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
		    String port_tDBInput_1 = "1433";
		    String dbname_tDBInput_1 = "DW" ;
			String url_tDBInput_1 = "jdbc:jtds:sqlserver://" + "DESKTOP-SKA0L5T" ;
		    if (!"".equals(port_tDBInput_1)) {
		    	url_tDBInput_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_1)) {
				url_tDBInput_1 += "//" + "DW"; 
		    }
		    url_tDBInput_1 += ";appName=" + projectName + ";" + "INSTANCE=OLAP";
		    String dbschema_tDBInput_1 = "dbo";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT dbo.DIM_EMPRESA.SK_EMPRESA,\n		dbo.DIM_EMPRESA.COD_EMPRESA,\n		dbo.DIM_EMPRESA.NOME_EMPRESA,\n		dbo.DIM_EMPRESA.FAN"
+"TASIA,\n		dbo.DIM_EMPRESA.CNPJ,\n		dbo.DIM_EMPRESA.ENDERECO,\n		dbo.DIM_EMPRESA.COD_CIDADE\nFROM	dbo.DIM_EMPRESA";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								EMPRESA.SK_EMPRESA = 0;
							} else {
		                          
            EMPRESA.SK_EMPRESA = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								EMPRESA.COD_EMPRESA = 0;
							} else {
		                          
            EMPRESA.COD_EMPRESA = rs_tDBInput_1.getInt(2);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								EMPRESA.NOME_EMPRESA = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		EMPRESA.NOME_EMPRESA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	EMPRESA.NOME_EMPRESA = tmpContent_tDBInput_1;
                }
            } else {
                EMPRESA.NOME_EMPRESA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								EMPRESA.FANTASIA = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		EMPRESA.FANTASIA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	EMPRESA.FANTASIA = tmpContent_tDBInput_1;
                }
            } else {
                EMPRESA.FANTASIA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								EMPRESA.CNPJ = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(5);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		EMPRESA.CNPJ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	EMPRESA.CNPJ = tmpContent_tDBInput_1;
                }
            } else {
                EMPRESA.CNPJ = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								EMPRESA.ENDERECO = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(6);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		EMPRESA.ENDERECO = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	EMPRESA.ENDERECO = tmpContent_tDBInput_1;
                }
            } else {
                EMPRESA.ENDERECO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								EMPRESA.COD_CIDADE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(7);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
            		EMPRESA.COD_CIDADE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	EMPRESA.COD_CIDADE = tmpContent_tDBInput_1;
                }
            } else {
                EMPRESA.COD_CIDADE = null;
            }
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"EMPRESA");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "NOTA_FISCAL" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopNOTA_FISCAL = false;
       		  	    	
       		  	    	
 							NOTA_FISCALStruct NOTA_FISCALObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_NOTA_FISCAL__COD_EMPRESA = EMPRESA.COD_EMPRESA ;
	                        		    	if(exprKeyValue_NOTA_FISCAL__COD_EMPRESA == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			NOTA_FISCALHashKey.COD_EMPRESA = (int)(Integer) exprKeyValue_NOTA_FISCAL__COD_EMPRESA;
                        		    		}
                        		    		

								
		                        	NOTA_FISCALHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_NOTA_FISCAL.lookup( NOTA_FISCALHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_NOTA_FISCAL.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLoopNOTA_FISCAL = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLoopNOTA_FISCAL = true;
			           		  	} // G 21
                    		  	
                    		

							NOTA_FISCALStruct NOTA_FISCAL = null;
                    		  	 
							

								while ((tHash_Lookup_NOTA_FISCAL != null && tHash_Lookup_NOTA_FISCAL.hasNext()) || forceLoopNOTA_FISCAL) { // G_TM_M_043

								
									 // CALL close loop of lookup 'NOTA_FISCAL'
									
                    		  	 
							   
                    		  	 
	       		  	    	NOTA_FISCALStruct fromLookup_NOTA_FISCAL = null;
							NOTA_FISCAL = NOTA_FISCALDefault;
										 
							
								
								if(!forceLoopNOTA_FISCAL) { // G 46
								
							
								 
							
								
								fromLookup_NOTA_FISCAL = tHash_Lookup_NOTA_FISCAL.next();

							

							if(fromLookup_NOTA_FISCAL != null) {
								NOTA_FISCAL = fromLookup_NOTA_FISCAL;
							}
							
							
							
			  							
							
                    		  	  		
								if( !rejectedInnerJoin_tMap_1 && 
									
									!(
										
										NOTA_FISCAL.TIP_NF.equals("S") && ( 
NOTA_FISCAL.COD_CFOP.equals("5.101") || NOTA_FISCAL.COD_CFOP.equals("6.101"))
										
									)
									
								) { // G 016
                    		  	  		  
									fromLookup_NOTA_FISCAL = null;
									NOTA_FISCAL = NOTA_FISCALDefault;
                    		  	  		  		
									
									
										rejectedInnerJoin_tMap_1 = true;
													
									
								} // G 016
     	               		  	
								
     	               		  	  	  
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLoopNOTA_FISCAL = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ITEM" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopITEM = false;
       		  	    	
       		  	    	
 							ITEMStruct ITEMObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_ITEM__COD_EMPRESA = EMPRESA.COD_EMPRESA ;
	                        		    	if(exprKeyValue_ITEM__COD_EMPRESA == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			ITEMHashKey.COD_EMPRESA = (int)(Integer) exprKeyValue_ITEM__COD_EMPRESA;
                        		    		}
                        		    		
	                        		    	Object exprKeyValue_ITEM__NUM_NF = NOTA_FISCAL.NUM_NF ;
	                        		    	if(exprKeyValue_ITEM__NUM_NF == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			ITEMHashKey.NUM_NF = (int)(Integer) exprKeyValue_ITEM__NUM_NF;
                        		    		}
                        		    		

								
		                        	ITEMHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_ITEM.lookup( ITEMHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_ITEM.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLoopITEM = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLoopITEM = true;
			           		  	} // G 21
                    		  	
                    		

							ITEMStruct ITEM = null;
                    		  	 
							

								while ((tHash_Lookup_ITEM != null && tHash_Lookup_ITEM.hasNext()) || forceLoopITEM) { // G_TM_M_043

								
									 // CALL close loop of lookup 'ITEM'
									
                    		  	 
							   
                    		  	 
	       		  	    	ITEMStruct fromLookup_ITEM = null;
							ITEM = ITEMDefault;
										 
							
								
								if(!forceLoopITEM) { // G 46
								
							
								 
							
								
								fromLookup_ITEM = tHash_Lookup_ITEM.next();

							

							if(fromLookup_ITEM != null) {
								ITEM = fromLookup_ITEM;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLoopITEM = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "CLIENTES" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopCLIENTES = false;
       		  	    	
       		  	    	
 							CLIENTESStruct CLIENTESObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_CLIENTES__COD_EMPRESA = EMPRESA.COD_EMPRESA ;
	                        		    	if(exprKeyValue_CLIENTES__COD_EMPRESA == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			CLIENTESHashKey.COD_EMPRESA = (int)(Integer) exprKeyValue_CLIENTES__COD_EMPRESA;
                        		    		}
                        		    		
	                        		    	Object exprKeyValue_CLIENTES__ID_CLIENTE = NOTA_FISCAL.ID_CLIFOR ;
	                        		    	if(exprKeyValue_CLIENTES__ID_CLIENTE == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			CLIENTESHashKey.ID_CLIENTE = (int)(Integer) exprKeyValue_CLIENTES__ID_CLIENTE;
                        		    		}
                        		    		

								
		                        	CLIENTESHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_CLIENTES.lookup( CLIENTESHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_CLIENTES.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLoopCLIENTES = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLoopCLIENTES = true;
			           		  	} // G 21
                    		  	
                    		

							CLIENTESStruct CLIENTES = null;
                    		  	 
							

								while ((tHash_Lookup_CLIENTES != null && tHash_Lookup_CLIENTES.hasNext()) || forceLoopCLIENTES) { // G_TM_M_043

								
									 // CALL close loop of lookup 'CLIENTES'
									
                    		  	 
							   
                    		  	 
	       		  	    	CLIENTESStruct fromLookup_CLIENTES = null;
							CLIENTES = CLIENTESDefault;
										 
							
								
								if(!forceLoopCLIENTES) { // G 46
								
							
								 
							
								
								fromLookup_CLIENTES = tHash_Lookup_CLIENTES.next();

							

							if(fromLookup_CLIENTES != null) {
								CLIENTES = fromLookup_CLIENTES;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLoopCLIENTES = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "MATERIAL" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopMATERIAL = false;
       		  	    	
       		  	    	
 							MATERIALStruct MATERIALObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_MATERIAL__SK_EMPRESA = EMPRESA.SK_EMPRESA ;
	                        		    	if(exprKeyValue_MATERIAL__SK_EMPRESA == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			MATERIALHashKey.SK_EMPRESA = (int)(Integer) exprKeyValue_MATERIAL__SK_EMPRESA;
                        		    		}
                        		    		
	                        		    	Object exprKeyValue_MATERIAL__COD_MAT = ITEM.COD_MAT ;
	                        		    	if(exprKeyValue_MATERIAL__COD_MAT == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			MATERIALHashKey.COD_MAT = (int)(Integer) exprKeyValue_MATERIAL__COD_MAT;
                        		    		}
                        		    		

								
		                        	MATERIALHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_MATERIAL.lookup( MATERIALHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_MATERIAL.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLoopMATERIAL = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLoopMATERIAL = true;
			           		  	} // G 21
                    		  	
                    		

							MATERIALStruct MATERIAL = null;
                    		  	 
							

								while ((tHash_Lookup_MATERIAL != null && tHash_Lookup_MATERIAL.hasNext()) || forceLoopMATERIAL) { // G_TM_M_043

								
									 // CALL close loop of lookup 'MATERIAL'
									
                    		  	 
							   
                    		  	 
	       		  	    	MATERIALStruct fromLookup_MATERIAL = null;
							MATERIAL = MATERIALDefault;
										 
							
								
								if(!forceLoopMATERIAL) { // G 46
								
							
								 
							
								
								fromLookup_MATERIAL = tHash_Lookup_MATERIAL.next();

							

							if(fromLookup_MATERIAL != null) {
								MATERIAL = fromLookup_MATERIAL;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLoopMATERIAL = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

SAIDA = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'SAIDA'
SAIDA_tmp.SK_EMPRESA = EMPRESA.SK_EMPRESA ;
SAIDA_tmp.NUM_NF = NOTA_FISCAL.NUM_NF ;
SAIDA_tmp.TIP_NF = NOTA_FISCAL.TIP_NF ;
SAIDA_tmp.COD_CFOP = NOTA_FISCAL.COD_CFOP ;
SAIDA_tmp.SK_CLIENTE = CLIENTES.SK_CLIENTE ;
SAIDA_tmp.COD_PAGTO = NOTA_FISCAL.COD_PAGTO ;
SAIDA_tmp.DATA_EMISSAO =  NOTA_FISCAL.DATA_EMISSAO ;
SAIDA_tmp.DATA_ENTREGA = NOTA_FISCAL.DATA_ENTREGA ;
SAIDA_tmp.TOTAL_NF = NOTA_FISCAL.TOTAL_NF ;
SAIDA_tmp.SEQ_MAT = ITEM.SEQ_MAT ;
SAIDA_tmp.SK_MAT = MATERIAL.SK_MAT ;
SAIDA_tmp.QTD = ITEM.QTD ;
SAIDA_tmp.VAL_UNIT = ITEM.VAL_UNIT ;
SAIDA_tmp.VAL_CUSTO = null;
SAIDA = SAIDA_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "SAIDA"
if(SAIDA != null) { 



	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"SAIDA");
					}
					
	
operation_finder_tAggregateRow_1.SK_EMPRESA = SAIDA.SK_EMPRESA;
			operation_finder_tAggregateRow_1.NUM_NF = SAIDA.NUM_NF;
			operation_finder_tAggregateRow_1.TIP_NF = SAIDA.TIP_NF;
			operation_finder_tAggregateRow_1.COD_CFOP = SAIDA.COD_CFOP;
			operation_finder_tAggregateRow_1.SK_CLIENTE = SAIDA.SK_CLIENTE;
			operation_finder_tAggregateRow_1.COD_PAGTO = SAIDA.COD_PAGTO;
			operation_finder_tAggregateRow_1.DATA_EMISSAO = SAIDA.DATA_EMISSAO;
			operation_finder_tAggregateRow_1.DATA_ENTREGA = SAIDA.DATA_ENTREGA;
			operation_finder_tAggregateRow_1.TOTAL_NF = SAIDA.TOTAL_NF;
			operation_finder_tAggregateRow_1.SEQ_MAT = SAIDA.SEQ_MAT;
			operation_finder_tAggregateRow_1.SK_MAT = SAIDA.SK_MAT;
			operation_finder_tAggregateRow_1.QTD = SAIDA.QTD;
			operation_finder_tAggregateRow_1.VAL_UNIT = SAIDA.VAL_UNIT;
			operation_finder_tAggregateRow_1.VAL_CUSTO = SAIDA.VAL_CUSTO;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.SK_EMPRESA = operation_finder_tAggregateRow_1.SK_EMPRESA;
				operation_result_tAggregateRow_1.NUM_NF = operation_finder_tAggregateRow_1.NUM_NF;
				operation_result_tAggregateRow_1.TIP_NF = operation_finder_tAggregateRow_1.TIP_NF;
				operation_result_tAggregateRow_1.COD_CFOP = operation_finder_tAggregateRow_1.COD_CFOP;
				operation_result_tAggregateRow_1.SK_CLIENTE = operation_finder_tAggregateRow_1.SK_CLIENTE;
				operation_result_tAggregateRow_1.COD_PAGTO = operation_finder_tAggregateRow_1.COD_PAGTO;
				operation_result_tAggregateRow_1.DATA_EMISSAO = operation_finder_tAggregateRow_1.DATA_EMISSAO;
				operation_result_tAggregateRow_1.DATA_ENTREGA = operation_finder_tAggregateRow_1.DATA_ENTREGA;
				operation_result_tAggregateRow_1.TOTAL_NF = operation_finder_tAggregateRow_1.TOTAL_NF;
				operation_result_tAggregateRow_1.SEQ_MAT = operation_finder_tAggregateRow_1.SEQ_MAT;
				operation_result_tAggregateRow_1.SK_MAT = operation_finder_tAggregateRow_1.SK_MAT;
				operation_result_tAggregateRow_1.QTD = operation_finder_tAggregateRow_1.QTD;
				operation_result_tAggregateRow_1.VAL_UNIT = operation_finder_tAggregateRow_1.VAL_UNIT;
				operation_result_tAggregateRow_1.VAL_CUSTO = operation_finder_tAggregateRow_1.VAL_CUSTO;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */

} // End of branch "SAIDA"



	
		} // close loop of lookup 'MATERIAL' // G_TM_M_043
		
		} // close loop of lookup 'CLIENTES' // G_TM_M_043
		
		} // close loop of lookup 'ITEM' // G_TM_M_043
		
		} // close loop of lookup 'NOTA_FISCAL' // G_TM_M_043
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_NOTA_FISCAL != null) {
						tHash_Lookup_NOTA_FISCAL.endGet();
					}
					globalMap.remove( "tHash_Lookup_NOTA_FISCAL" );

					
					
				
					if(tHash_Lookup_ITEM != null) {
						tHash_Lookup_ITEM.endGet();
					}
					globalMap.remove( "tHash_Lookup_ITEM" );

					
					
				
					if(tHash_Lookup_CLIENTES != null) {
						tHash_Lookup_CLIENTES.endGet();
					}
					globalMap.remove( "tHash_Lookup_CLIENTES" );

					
					
				
					if(tHash_Lookup_MATERIAL != null) {
						tHash_Lookup_MATERIAL.endGet();
					}
					globalMap.remove( "tHash_Lookup_MATERIAL" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"EMPRESA");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"SAIDA");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */


	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tDBOutput_1 = 0;
		



int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;
String dbschema_tDBOutput_1 = null;
String tableName_tDBOutput_1 = null;
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_1;

java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));

        int updateKeyCount_tDBOutput_1 = 3;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;
    dbschema_tDBOutput_1 = "dbo";
    String driverClass_tDBOutput_1 = "net.sourceforge.jtds.jdbc.Driver";
	
    java.lang.Class.forName(driverClass_tDBOutput_1);
    String port_tDBOutput_1 = "1433";
    String dbname_tDBOutput_1 = "DW" ;
    String url_tDBOutput_1 = "jdbc:jtds:sqlserver://" + "DESKTOP-SKA0L5T" ; 
    if (!"".equals(port_tDBOutput_1)) {
    	url_tDBOutput_1 += ":" + "1433";
    }
    if (!"".equals(dbname_tDBOutput_1)) {
				url_tDBOutput_1 += "//" + "DW"; 
	
    }
    url_tDBOutput_1 += ";appName=" + projectName + ";" + "INSTANCE=OLAP";
    dbUser_tDBOutput_1 = "ETLBI";

 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:HqggJVKZkDPOSEHPQTjgtwvm4X4OVAIHM6qP+Q8NiqtsPBsG");

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;	
    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
		resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
	
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;


if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
    tableName_tDBOutput_1 = "FATO_VENDA";
} else {
    tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].[" + "FATO_VENDA";
}
	int count_tDBOutput_1=0;

                                boolean whetherExist_tDBOutput_1 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_1.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_1 + "]" );
                                        whetherExist_tDBOutput_1 = true;
                                    } catch (java.lang.Exception e){
                                        whetherExist_tDBOutput_1 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_1) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                        stmtCreate_tDBOutput_1.execute("CREATE TABLE [" + tableName_tDBOutput_1 + "]([SK_EMPRESA] INT  not null ,[NUM_NF] INT  not null ,[TIP_NF] CHAR(1)   not null ,[COD_CFOP] VARCHAR(5)   not null ,[SK_CLIENTE] INT  not null ,[COD_PAGTO] INT  not null ,[DATA_EMISSAO] DATETIME  not null ,[DATA_ENTREGA] DATE  not null ,[TOTAL_NF] DECIMAL(10,2)  ,[SEQ_MAT] INT  not null ,[SK_MAT] INT  not null ,[QTD] DECIMAL(10,2)  ,[VAL_UNIT] DECIMAL(10,2)   not null ,[VAL_CUSTO] DECIMAL(10,2)  ,primary key([SK_EMPRESA],[NUM_NF],[SEQ_MAT]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_1 + "] WHERE [SK_EMPRESA] = ? AND [NUM_NF] = ? AND [SEQ_MAT] = ?");
        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
        String insert_tDBOutput_1 = "INSERT INTO [" + tableName_tDBOutput_1 + "] ([SK_EMPRESA],[NUM_NF],[TIP_NF],[COD_CFOP],[SK_CLIENTE],[COD_PAGTO],[DATA_EMISSAO],[DATA_ENTREGA],[TOTAL_NF],[SEQ_MAT],[SK_MAT],[QTD],[VAL_UNIT],[VAL_CUSTO]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
        resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
        String update_tDBOutput_1 = "UPDATE [" + tableName_tDBOutput_1 + "] SET [TIP_NF] = ?,[COD_CFOP] = ?,[SK_CLIENTE] = ?,[COD_PAGTO] = ?,[DATA_EMISSAO] = ?,[DATA_ENTREGA] = ?,[TOTAL_NF] = ?,[SK_MAT] = ?,[QTD] = ?,[VAL_UNIT] = ?,[VAL_CUSTO] = ? WHERE [SK_EMPRESA] = ? AND [NUM_NF] = ? AND [SEQ_MAT] = ?";
        java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
        resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

            				    row1.SK_EMPRESA = aggregated_row_tAggregateRow_1.SK_EMPRESA;
            				    
            				    row1.NUM_NF = aggregated_row_tAggregateRow_1.NUM_NF;
            				    
            				    row1.TIP_NF = aggregated_row_tAggregateRow_1.TIP_NF;
            				    
            				    row1.COD_CFOP = aggregated_row_tAggregateRow_1.COD_CFOP;
            				    
            				    row1.SK_CLIENTE = aggregated_row_tAggregateRow_1.SK_CLIENTE;
            				    
            				    row1.COD_PAGTO = aggregated_row_tAggregateRow_1.COD_PAGTO;
            				    
            				    row1.DATA_EMISSAO = aggregated_row_tAggregateRow_1.DATA_EMISSAO;
            				    
            				    row1.DATA_ENTREGA = aggregated_row_tAggregateRow_1.DATA_ENTREGA;
            				    
            				    row1.TOTAL_NF = aggregated_row_tAggregateRow_1.TOTAL_NF;
            				    
            				    row1.SEQ_MAT = aggregated_row_tAggregateRow_1.SEQ_MAT;
            				    
            				    row1.SK_MAT = aggregated_row_tAggregateRow_1.SK_MAT;
            				    
            				    row1.QTD = aggregated_row_tAggregateRow_1.QTD;
            				    
            				    row1.VAL_UNIT = aggregated_row_tAggregateRow_1.VAL_UNIT;
            				    
            				    row1.VAL_CUSTO = aggregated_row_tAggregateRow_1.VAL_CUSTO;
            				    

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					



        whetherReject_tDBOutput_1 = false;


                    pstmt_tDBOutput_1.setInt(1, row1.SK_EMPRESA);



                    pstmt_tDBOutput_1.setInt(2, row1.NUM_NF);



                    pstmt_tDBOutput_1.setInt(3, row1.SEQ_MAT);

            int checkCount_tDBOutput_1 = -1;
            try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
                while(rs_tDBOutput_1.next()) {
                    checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
                }
            }
            if(checkCount_tDBOutput_1 > 0) {
                        if(row1.TIP_NF == null) {
pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(1, row1.TIP_NF);
}

                        if(row1.COD_CFOP == null) {
pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(2, row1.COD_CFOP);
}

                        pstmtUpdate_tDBOutput_1.setInt(3, row1.SK_CLIENTE);

                        pstmtUpdate_tDBOutput_1.setInt(4, row1.COD_PAGTO);

                        if(row1.DATA_EMISSAO != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(5, new java.sql.Timestamp(row1.DATA_EMISSAO.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.DATE);
}

                        if(row1.DATA_ENTREGA != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(6, new java.sql.Timestamp(row1.DATA_ENTREGA.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.DATE);
}

                        pstmtUpdate_tDBOutput_1.setBigDecimal(7, row1.TOTAL_NF);

                        pstmtUpdate_tDBOutput_1.setInt(8, row1.SK_MAT);

                        pstmtUpdate_tDBOutput_1.setBigDecimal(9, row1.QTD);

                        pstmtUpdate_tDBOutput_1.setBigDecimal(10, row1.VAL_UNIT);

                        pstmtUpdate_tDBOutput_1.setBigDecimal(11, row1.VAL_CUSTO);


	                    

                        pstmtUpdate_tDBOutput_1.setInt(12 + count_tDBOutput_1, row1.SK_EMPRESA);


	                    

                        pstmtUpdate_tDBOutput_1.setInt(13 + count_tDBOutput_1, row1.NUM_NF);


	                    

                        pstmtUpdate_tDBOutput_1.setInt(14 + count_tDBOutput_1, row1.SEQ_MAT);

            try {
                    updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1 + pstmtUpdate_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
        			
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_1 = true;
                    	nb_line_tDBOutput_1++;
                    	
                            System.err.println(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_1.setInt(1, row1.SK_EMPRESA);

                        pstmtInsert_tDBOutput_1.setInt(2, row1.NUM_NF);

                        if(row1.TIP_NF == null) {
pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(3, row1.TIP_NF);
}

                        if(row1.COD_CFOP == null) {
pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(4, row1.COD_CFOP);
}

                        pstmtInsert_tDBOutput_1.setInt(5, row1.SK_CLIENTE);

                        pstmtInsert_tDBOutput_1.setInt(6, row1.COD_PAGTO);

                        if(row1.DATA_EMISSAO != null) {
pstmtInsert_tDBOutput_1.setTimestamp(7, new java.sql.Timestamp(row1.DATA_EMISSAO.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.DATE);
}

                        if(row1.DATA_ENTREGA != null) {
pstmtInsert_tDBOutput_1.setTimestamp(8, new java.sql.Timestamp(row1.DATA_ENTREGA.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.DATE);
}

                        pstmtInsert_tDBOutput_1.setBigDecimal(9, row1.TOTAL_NF);

                        pstmtInsert_tDBOutput_1.setInt(10, row1.SEQ_MAT);

                        pstmtInsert_tDBOutput_1.setInt(11, row1.SK_MAT);

                        pstmtInsert_tDBOutput_1.setBigDecimal(12, row1.QTD);

                        pstmtInsert_tDBOutput_1.setBigDecimal(13, row1.VAL_UNIT);

                        pstmtInsert_tDBOutput_1.setBigDecimal(14, row1.VAL_CUSTO);

            try {
                    insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1 + pstmtInsert_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_1 = true;
                    	nb_line_tDBOutput_1++;
                    	
                            System.err.println(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_1{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
						
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                	
                	conn_tDBOutput_1.commit();
            		
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
            conn_tDBOutput_1.commit();
			
        conn_tDBOutput_1 .close();
        resourceMap.put("finish_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_NOTA_FISCAL"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ITEM"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_CLIENTES"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_MATERIAL"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class NOTA_FISCALStruct implements routines.system.IPersistableComparableLookupRow<NOTA_FISCALStruct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_FATO_VENDA = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_FATO_VENDA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int COD_EMPRESA;

				public int getCOD_EMPRESA () {
					return this.COD_EMPRESA;
				}
				
			    public int NUM_NF;

				public int getNUM_NF () {
					return this.NUM_NF;
				}
				
			    public String TIP_NF;

				public String getTIP_NF () {
					return this.TIP_NF;
				}
				
			    public String COD_CFOP;

				public String getCOD_CFOP () {
					return this.COD_CFOP;
				}
				
			    public int ID_CLIFOR;

				public int getID_CLIFOR () {
					return this.ID_CLIFOR;
				}
				
			    public int COD_PAGTO;

				public int getCOD_PAGTO () {
					return this.COD_PAGTO;
				}
				
			    public java.util.Date DATA_EMISSAO;

				public java.util.Date getDATA_EMISSAO () {
					return this.DATA_EMISSAO;
				}
				
			    public java.util.Date DATA_ENTREGA;

				public java.util.Date getDATA_ENTREGA () {
					return this.DATA_ENTREGA;
				}
				
			    public BigDecimal TOTAL_NF;

				public BigDecimal getTOTAL_NF () {
					return this.TOTAL_NF;
				}
				
			    public String INTEGRADA_FIN;

				public String getINTEGRADA_FIN () {
					return this.INTEGRADA_FIN;
				}
				
			    public String INTEGRADA_SUP;

				public String getINTEGRADA_SUP () {
					return this.INTEGRADA_SUP;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.COD_EMPRESA;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final NOTA_FISCALStruct other = (NOTA_FISCALStruct) obj;
		
						if (this.COD_EMPRESA != other.COD_EMPRESA)
							return false;
					

		return true;
    }

	public void copyDataTo(NOTA_FISCALStruct other) {

		other.COD_EMPRESA = this.COD_EMPRESA;
	            other.NUM_NF = this.NUM_NF;
	            other.TIP_NF = this.TIP_NF;
	            other.COD_CFOP = this.COD_CFOP;
	            other.ID_CLIFOR = this.ID_CLIFOR;
	            other.COD_PAGTO = this.COD_PAGTO;
	            other.DATA_EMISSAO = this.DATA_EMISSAO;
	            other.DATA_ENTREGA = this.DATA_ENTREGA;
	            other.TOTAL_NF = this.TOTAL_NF;
	            other.INTEGRADA_FIN = this.INTEGRADA_FIN;
	            other.INTEGRADA_SUP = this.INTEGRADA_SUP;
	            
	}

	public void copyKeysDataTo(NOTA_FISCALStruct other) {

		other.COD_EMPRESA = this.COD_EMPRESA;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_FATO_VENDA) {

        	try {

        		int length = 0;
		
			        this.COD_EMPRESA = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.COD_EMPRESA);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.NUM_NF = dis.readInt();
					
						this.TIP_NF = readString(dis,ois);
					
						this.COD_CFOP = readString(dis,ois);
					
			            this.ID_CLIFOR = dis.readInt();
					
			            this.COD_PAGTO = dis.readInt();
					
						this.DATA_EMISSAO = readDate(dis,ois);
					
						this.DATA_ENTREGA = readDate(dis,ois);
					
       			    	this.TOTAL_NF = (BigDecimal) ois.readObject();
					
						this.INTEGRADA_FIN = readString(dis,ois);
					
						this.INTEGRADA_SUP = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.NUM_NF);
					
						writeString(this.TIP_NF, dos, oos);
					
						writeString(this.COD_CFOP, dos, oos);
					
		            	dos.writeInt(this.ID_CLIFOR);
					
		            	dos.writeInt(this.COD_PAGTO);
					
						writeDate(this.DATA_EMISSAO, dos, oos);
					
						writeDate(this.DATA_ENTREGA, dos, oos);
					
       			    	oos.writeObject(this.TOTAL_NF);
					
						writeString(this.INTEGRADA_FIN, dos, oos);
					
						writeString(this.INTEGRADA_SUP, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COD_EMPRESA="+String.valueOf(COD_EMPRESA));
		sb.append(",NUM_NF="+String.valueOf(NUM_NF));
		sb.append(",TIP_NF="+TIP_NF);
		sb.append(",COD_CFOP="+COD_CFOP);
		sb.append(",ID_CLIFOR="+String.valueOf(ID_CLIFOR));
		sb.append(",COD_PAGTO="+String.valueOf(COD_PAGTO));
		sb.append(",DATA_EMISSAO="+String.valueOf(DATA_EMISSAO));
		sb.append(",DATA_ENTREGA="+String.valueOf(DATA_ENTREGA));
		sb.append(",TOTAL_NF="+String.valueOf(TOTAL_NF));
		sb.append(",INTEGRADA_FIN="+INTEGRADA_FIN);
		sb.append(",INTEGRADA_SUP="+INTEGRADA_SUP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(NOTA_FISCALStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.COD_EMPRESA, other.COD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		NOTA_FISCALStruct NOTA_FISCAL = new NOTA_FISCALStruct();




	
	/**
	 * [tAdvancedHash_NOTA_FISCAL begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_NOTA_FISCAL", false);
		start_Hash.put("tAdvancedHash_NOTA_FISCAL", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_NOTA_FISCAL";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"NOTA_FISCAL");
					}
				
		int tos_count_tAdvancedHash_NOTA_FISCAL = 0;
		

			   		// connection name:NOTA_FISCAL
			   		// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(NOTA_FISCAL,NOTA_FISCAL) | target node:tAdvancedHash_NOTA_FISCAL - inputs:(NOTA_FISCAL) outputs:()
			   		// linked node: tMap_1 - inputs:(EMPRESA,NOTA_FISCAL,ITEM,CLIENTES,MATERIAL) outputs:(SAIDA)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_NOTA_FISCAL = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<NOTA_FISCALStruct> tHash_Lookup_NOTA_FISCAL =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<NOTA_FISCALStruct>getLookup(matchingModeEnum_NOTA_FISCAL);
	   						   
		   	   	   globalMap.put("tHash_Lookup_NOTA_FISCAL", tHash_Lookup_NOTA_FISCAL);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_NOTA_FISCAL begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2); 
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "ETLBI";
				
				 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:TwMejaUdKS93tp5Y75jGbJlEQGlpIOXisqc6K3xtBAp0qUtZ");
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
		    String port_tDBInput_2 = "1433";
		    String dbname_tDBInput_2 = "DW" ;
			String url_tDBInput_2 = "jdbc:jtds:sqlserver://" + "DESKTOP-SKA0L5T" ;
		    if (!"".equals(port_tDBInput_2)) {
		    	url_tDBInput_2 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_2)) {
				url_tDBInput_2 += "//" + "DW"; 
		    }
		    url_tDBInput_2 += ";appName=" + projectName + ";" + "INSTANCE=OLAP";
		    String dbschema_tDBInput_2 = "dbo";
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT dbo.STG_NOTA_FISCAL.COD_EMPRESA,\n		dbo.STG_NOTA_FISCAL.NUM_NF,\n		dbo.STG_NOTA_FISCAL.TIP_NF,\n		dbo.STG_NOTA_FISC"
+"AL.COD_CFOP,\n		dbo.STG_NOTA_FISCAL.ID_CLIFOR,\n		dbo.STG_NOTA_FISCAL.COD_PAGTO,\n		dbo.STG_NOTA_FISCAL.DATA_EMISSAO,\n		dbo"
+".STG_NOTA_FISCAL.DATA_ENTREGA,\n		dbo.STG_NOTA_FISCAL.TOTAL_NF,\n		dbo.STG_NOTA_FISCAL.INTEGRADA_FIN,\n		dbo.STG_NOTA_FISCA"
+"L.INTEGRADA_SUP\nFROM	dbo.STG_NOTA_FISCAL";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								NOTA_FISCAL.COD_EMPRESA = 0;
							} else {
		                          
            NOTA_FISCAL.COD_EMPRESA = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								NOTA_FISCAL.NUM_NF = 0;
							} else {
		                          
            NOTA_FISCAL.NUM_NF = rs_tDBInput_2.getInt(2);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								NOTA_FISCAL.TIP_NF = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(3);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		NOTA_FISCAL.TIP_NF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	NOTA_FISCAL.TIP_NF = tmpContent_tDBInput_2;
                }
            } else {
                NOTA_FISCAL.TIP_NF = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								NOTA_FISCAL.COD_CFOP = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(4);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		NOTA_FISCAL.COD_CFOP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	NOTA_FISCAL.COD_CFOP = tmpContent_tDBInput_2;
                }
            } else {
                NOTA_FISCAL.COD_CFOP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								NOTA_FISCAL.ID_CLIFOR = 0;
							} else {
		                          
            NOTA_FISCAL.ID_CLIFOR = rs_tDBInput_2.getInt(5);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								NOTA_FISCAL.COD_PAGTO = 0;
							} else {
		                          
            NOTA_FISCAL.COD_PAGTO = rs_tDBInput_2.getInt(6);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								NOTA_FISCAL.DATA_EMISSAO = null;
							} else {
										
			NOTA_FISCAL.DATA_EMISSAO = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 7);
			
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								NOTA_FISCAL.DATA_ENTREGA = null;
							} else {
										
			NOTA_FISCAL.DATA_ENTREGA = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 8);
			
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								NOTA_FISCAL.TOTAL_NF = null;
							} else {
		                          
            NOTA_FISCAL.TOTAL_NF = rs_tDBInput_2.getBigDecimal(9);
            if(rs_tDBInput_2.wasNull()){
                    NOTA_FISCAL.TOTAL_NF = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								NOTA_FISCAL.INTEGRADA_FIN = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(10);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
            		NOTA_FISCAL.INTEGRADA_FIN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	NOTA_FISCAL.INTEGRADA_FIN = tmpContent_tDBInput_2;
                }
            } else {
                NOTA_FISCAL.INTEGRADA_FIN = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								NOTA_FISCAL.INTEGRADA_SUP = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(11);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
            		NOTA_FISCAL.INTEGRADA_SUP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	NOTA_FISCAL.INTEGRADA_SUP = tmpContent_tDBInput_2;
                }
            } else {
                NOTA_FISCAL.INTEGRADA_SUP = null;
            }
		                    }
					





 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_NOTA_FISCAL main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_NOTA_FISCAL";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"NOTA_FISCAL");
					}
					


			   
			   

					NOTA_FISCALStruct NOTA_FISCAL_HashRow = new NOTA_FISCALStruct();
		   	   	   
				
				NOTA_FISCAL_HashRow.COD_EMPRESA = NOTA_FISCAL.COD_EMPRESA;
				
				NOTA_FISCAL_HashRow.NUM_NF = NOTA_FISCAL.NUM_NF;
				
				NOTA_FISCAL_HashRow.TIP_NF = NOTA_FISCAL.TIP_NF;
				
				NOTA_FISCAL_HashRow.COD_CFOP = NOTA_FISCAL.COD_CFOP;
				
				NOTA_FISCAL_HashRow.ID_CLIFOR = NOTA_FISCAL.ID_CLIFOR;
				
				NOTA_FISCAL_HashRow.COD_PAGTO = NOTA_FISCAL.COD_PAGTO;
				
				NOTA_FISCAL_HashRow.DATA_EMISSAO = NOTA_FISCAL.DATA_EMISSAO;
				
				NOTA_FISCAL_HashRow.DATA_ENTREGA = NOTA_FISCAL.DATA_ENTREGA;
				
				NOTA_FISCAL_HashRow.TOTAL_NF = NOTA_FISCAL.TOTAL_NF;
				
				NOTA_FISCAL_HashRow.INTEGRADA_FIN = NOTA_FISCAL.INTEGRADA_FIN;
				
				NOTA_FISCAL_HashRow.INTEGRADA_SUP = NOTA_FISCAL.INTEGRADA_SUP;
				
			tHash_Lookup_NOTA_FISCAL.put(NOTA_FISCAL_HashRow);
			
            




 


	tos_count_tAdvancedHash_NOTA_FISCAL++;

/**
 * [tAdvancedHash_NOTA_FISCAL main ] stop
 */
	
	/**
	 * [tAdvancedHash_NOTA_FISCAL process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_NOTA_FISCAL";

	

 



/**
 * [tAdvancedHash_NOTA_FISCAL process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_NOTA_FISCAL process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_NOTA_FISCAL";

	

 



/**
 * [tAdvancedHash_NOTA_FISCAL process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_NOTA_FISCAL end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_NOTA_FISCAL";

	

tHash_Lookup_NOTA_FISCAL.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"NOTA_FISCAL");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_NOTA_FISCAL", true);
end_Hash.put("tAdvancedHash_NOTA_FISCAL", System.currentTimeMillis());




/**
 * [tAdvancedHash_NOTA_FISCAL end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_NOTA_FISCAL finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_NOTA_FISCAL";

	

 



/**
 * [tAdvancedHash_NOTA_FISCAL finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class ITEMStruct implements routines.system.IPersistableComparableLookupRow<ITEMStruct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_FATO_VENDA = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_FATO_VENDA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int COD_EMPRESA;

				public int getCOD_EMPRESA () {
					return this.COD_EMPRESA;
				}
				
			    public int NUM_NF;

				public int getNUM_NF () {
					return this.NUM_NF;
				}
				
			    public int SEQ_MAT;

				public int getSEQ_MAT () {
					return this.SEQ_MAT;
				}
				
			    public int COD_MAT;

				public int getCOD_MAT () {
					return this.COD_MAT;
				}
				
			    public BigDecimal QTD;

				public BigDecimal getQTD () {
					return this.QTD;
				}
				
			    public BigDecimal VAL_UNIT;

				public BigDecimal getVAL_UNIT () {
					return this.VAL_UNIT;
				}
				
			    public Integer PED_ORIG;

				public Integer getPED_ORIG () {
					return this.PED_ORIG;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.COD_EMPRESA;
						
							result = prime * result + (int) this.NUM_NF;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ITEMStruct other = (ITEMStruct) obj;
		
						if (this.COD_EMPRESA != other.COD_EMPRESA)
							return false;
					
						if (this.NUM_NF != other.NUM_NF)
							return false;
					

		return true;
    }

	public void copyDataTo(ITEMStruct other) {

		other.COD_EMPRESA = this.COD_EMPRESA;
	            other.NUM_NF = this.NUM_NF;
	            other.SEQ_MAT = this.SEQ_MAT;
	            other.COD_MAT = this.COD_MAT;
	            other.QTD = this.QTD;
	            other.VAL_UNIT = this.VAL_UNIT;
	            other.PED_ORIG = this.PED_ORIG;
	            
	}

	public void copyKeysDataTo(ITEMStruct other) {

		other.COD_EMPRESA = this.COD_EMPRESA;
	            	other.NUM_NF = this.NUM_NF;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_FATO_VENDA) {

        	try {

        		int length = 0;
		
			        this.COD_EMPRESA = dis.readInt();
					
			        this.NUM_NF = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.COD_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.NUM_NF);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.SEQ_MAT = dis.readInt();
					
			            this.COD_MAT = dis.readInt();
					
       			    	this.QTD = (BigDecimal) ois.readObject();
					
       			    	this.VAL_UNIT = (BigDecimal) ois.readObject();
					
						this.PED_ORIG = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.SEQ_MAT);
					
		            	dos.writeInt(this.COD_MAT);
					
       			    	oos.writeObject(this.QTD);
					
       			    	oos.writeObject(this.VAL_UNIT);
					
					writeInteger(this.PED_ORIG, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COD_EMPRESA="+String.valueOf(COD_EMPRESA));
		sb.append(",NUM_NF="+String.valueOf(NUM_NF));
		sb.append(",SEQ_MAT="+String.valueOf(SEQ_MAT));
		sb.append(",COD_MAT="+String.valueOf(COD_MAT));
		sb.append(",QTD="+String.valueOf(QTD));
		sb.append(",VAL_UNIT="+String.valueOf(VAL_UNIT));
		sb.append(",PED_ORIG="+String.valueOf(PED_ORIG));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ITEMStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.COD_EMPRESA, other.COD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NUM_NF, other.NUM_NF);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		ITEMStruct ITEM = new ITEMStruct();




	
	/**
	 * [tAdvancedHash_ITEM begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ITEM", false);
		start_Hash.put("tAdvancedHash_ITEM", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ITEM";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ITEM");
					}
				
		int tos_count_tAdvancedHash_ITEM = 0;
		

			   		// connection name:ITEM
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_1) outputs:(ITEM,ITEM) | target node:tAdvancedHash_ITEM - inputs:(ITEM) outputs:()
			   		// linked node: tMap_1 - inputs:(EMPRESA,NOTA_FISCAL,ITEM,CLIENTES,MATERIAL) outputs:(SAIDA)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ITEM = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ITEMStruct> tHash_Lookup_ITEM =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ITEMStruct>getLookup(matchingModeEnum_ITEM);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ITEM", tHash_Lookup_ITEM);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ITEM begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_3  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3); 
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "ETLBI";
				
				 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:0EEspL3YOv9wPGEdvnsjNUngW5cCSqTYRWN/i7+NatLDJhlf");
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
		    String port_tDBInput_3 = "1433";
		    String dbname_tDBInput_3 = "DW" ;
			String url_tDBInput_3 = "jdbc:jtds:sqlserver://" + "DESKTOP-SKA0L5T" ;
		    if (!"".equals(port_tDBInput_3)) {
		    	url_tDBInput_3 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_3)) {
				url_tDBInput_3 += "//" + "DW"; 
		    }
		    url_tDBInput_3 += ";appName=" + projectName + ";" + "INSTANCE=OLAP";
		    String dbschema_tDBInput_3 = "dbo";
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT dbo.STG_NOTA_FISCAL_ITENS.COD_EMPRESA,\n		dbo.STG_NOTA_FISCAL_ITENS.NUM_NF,\n		dbo.STG_NOTA_FISCAL_ITENS.SEQ_MAT,\n"
+"		dbo.STG_NOTA_FISCAL_ITENS.COD_MAT,\n		dbo.STG_NOTA_FISCAL_ITENS.QTD,\n		dbo.STG_NOTA_FISCAL_ITENS.VAL_UNIT,\n		dbo.STG_NO"
+"TA_FISCAL_ITENS.PED_ORIG\nFROM	dbo.STG_NOTA_FISCAL_ITENS";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								ITEM.COD_EMPRESA = 0;
							} else {
		                          
            ITEM.COD_EMPRESA = rs_tDBInput_3.getInt(1);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								ITEM.NUM_NF = 0;
							} else {
		                          
            ITEM.NUM_NF = rs_tDBInput_3.getInt(2);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								ITEM.SEQ_MAT = 0;
							} else {
		                          
            ITEM.SEQ_MAT = rs_tDBInput_3.getInt(3);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								ITEM.COD_MAT = 0;
							} else {
		                          
            ITEM.COD_MAT = rs_tDBInput_3.getInt(4);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								ITEM.QTD = null;
							} else {
		                          
            ITEM.QTD = rs_tDBInput_3.getBigDecimal(5);
            if(rs_tDBInput_3.wasNull()){
                    ITEM.QTD = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								ITEM.VAL_UNIT = null;
							} else {
		                          
            ITEM.VAL_UNIT = rs_tDBInput_3.getBigDecimal(6);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								ITEM.PED_ORIG = null;
							} else {
		                          
            ITEM.PED_ORIG = rs_tDBInput_3.getInt(7);
            if(rs_tDBInput_3.wasNull()){
                    ITEM.PED_ORIG = null;
            }
		                    }
					





 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_ITEM main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ITEM";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"ITEM");
					}
					


			   
			   

					ITEMStruct ITEM_HashRow = new ITEMStruct();
		   	   	   
				
				ITEM_HashRow.COD_EMPRESA = ITEM.COD_EMPRESA;
				
				ITEM_HashRow.NUM_NF = ITEM.NUM_NF;
				
				ITEM_HashRow.SEQ_MAT = ITEM.SEQ_MAT;
				
				ITEM_HashRow.COD_MAT = ITEM.COD_MAT;
				
				ITEM_HashRow.QTD = ITEM.QTD;
				
				ITEM_HashRow.VAL_UNIT = ITEM.VAL_UNIT;
				
				ITEM_HashRow.PED_ORIG = ITEM.PED_ORIG;
				
			tHash_Lookup_ITEM.put(ITEM_HashRow);
			
            




 


	tos_count_tAdvancedHash_ITEM++;

/**
 * [tAdvancedHash_ITEM main ] stop
 */
	
	/**
	 * [tAdvancedHash_ITEM process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ITEM";

	

 



/**
 * [tAdvancedHash_ITEM process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_ITEM process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ITEM";

	

 



/**
 * [tAdvancedHash_ITEM process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ITEM end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ITEM";

	

tHash_Lookup_ITEM.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ITEM");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_ITEM", true);
end_Hash.put("tAdvancedHash_ITEM", System.currentTimeMillis());




/**
 * [tAdvancedHash_ITEM end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ITEM finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ITEM";

	

 



/**
 * [tAdvancedHash_ITEM finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class CLIENTESStruct implements routines.system.IPersistableComparableLookupRow<CLIENTESStruct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_FATO_VENDA = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_FATO_VENDA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SK_CLIENTE;

				public int getSK_CLIENTE () {
					return this.SK_CLIENTE;
				}
				
			    public int COD_EMPRESA;

				public int getCOD_EMPRESA () {
					return this.COD_EMPRESA;
				}
				
			    public int ID_CLIENTE;

				public int getID_CLIENTE () {
					return this.ID_CLIENTE;
				}
				
			    public String RAZAO_CLIENTE;

				public String getRAZAO_CLIENTE () {
					return this.RAZAO_CLIENTE;
				}
				
			    public String FANTASIA;

				public String getFANTASIA () {
					return this.FANTASIA;
				}
				
			    public String ENDERECO;

				public String getENDERECO () {
					return this.ENDERECO;
				}
				
			    public String NRO;

				public String getNRO () {
					return this.NRO;
				}
				
			    public String BAIRRO;

				public String getBAIRRO () {
					return this.BAIRRO;
				}
				
			    public String COD_CIDADE;

				public String getCOD_CIDADE () {
					return this.COD_CIDADE;
				}
				
			    public String CEP;

				public String getCEP () {
					return this.CEP;
				}
				
			    public String CNPJ_CPF;

				public String getCNPJ_CPF () {
					return this.CNPJ_CPF;
				}
				
			    public String TIPO_CLIENTE;

				public String getTIPO_CLIENTE () {
					return this.TIPO_CLIENTE;
				}
				
			    public java.util.Date DATA_CADASTRO;

				public java.util.Date getDATA_CADASTRO () {
					return this.DATA_CADASTRO;
				}
				
			    public String SITUACAO;

				public String getSITUACAO () {
					return this.SITUACAO;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.COD_EMPRESA;
						
							result = prime * result + (int) this.ID_CLIENTE;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final CLIENTESStruct other = (CLIENTESStruct) obj;
		
						if (this.COD_EMPRESA != other.COD_EMPRESA)
							return false;
					
						if (this.ID_CLIENTE != other.ID_CLIENTE)
							return false;
					

		return true;
    }

	public void copyDataTo(CLIENTESStruct other) {

		other.SK_CLIENTE = this.SK_CLIENTE;
	            other.COD_EMPRESA = this.COD_EMPRESA;
	            other.ID_CLIENTE = this.ID_CLIENTE;
	            other.RAZAO_CLIENTE = this.RAZAO_CLIENTE;
	            other.FANTASIA = this.FANTASIA;
	            other.ENDERECO = this.ENDERECO;
	            other.NRO = this.NRO;
	            other.BAIRRO = this.BAIRRO;
	            other.COD_CIDADE = this.COD_CIDADE;
	            other.CEP = this.CEP;
	            other.CNPJ_CPF = this.CNPJ_CPF;
	            other.TIPO_CLIENTE = this.TIPO_CLIENTE;
	            other.DATA_CADASTRO = this.DATA_CADASTRO;
	            other.SITUACAO = this.SITUACAO;
	            
	}

	public void copyKeysDataTo(CLIENTESStruct other) {

		other.COD_EMPRESA = this.COD_EMPRESA;
	            	other.ID_CLIENTE = this.ID_CLIENTE;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_FATO_VENDA) {

        	try {

        		int length = 0;
		
			        this.COD_EMPRESA = dis.readInt();
					
			        this.ID_CLIENTE = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.COD_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.ID_CLIENTE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.SK_CLIENTE = dis.readInt();
					
						this.RAZAO_CLIENTE = readString(dis,ois);
					
						this.FANTASIA = readString(dis,ois);
					
						this.ENDERECO = readString(dis,ois);
					
						this.NRO = readString(dis,ois);
					
						this.BAIRRO = readString(dis,ois);
					
						this.COD_CIDADE = readString(dis,ois);
					
						this.CEP = readString(dis,ois);
					
						this.CNPJ_CPF = readString(dis,ois);
					
						this.TIPO_CLIENTE = readString(dis,ois);
					
						this.DATA_CADASTRO = readDate(dis,ois);
					
						this.SITUACAO = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.SK_CLIENTE);
					
						writeString(this.RAZAO_CLIENTE, dos, oos);
					
						writeString(this.FANTASIA, dos, oos);
					
						writeString(this.ENDERECO, dos, oos);
					
						writeString(this.NRO, dos, oos);
					
						writeString(this.BAIRRO, dos, oos);
					
						writeString(this.COD_CIDADE, dos, oos);
					
						writeString(this.CEP, dos, oos);
					
						writeString(this.CNPJ_CPF, dos, oos);
					
						writeString(this.TIPO_CLIENTE, dos, oos);
					
						writeDate(this.DATA_CADASTRO, dos, oos);
					
						writeString(this.SITUACAO, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_CLIENTE="+String.valueOf(SK_CLIENTE));
		sb.append(",COD_EMPRESA="+String.valueOf(COD_EMPRESA));
		sb.append(",ID_CLIENTE="+String.valueOf(ID_CLIENTE));
		sb.append(",RAZAO_CLIENTE="+RAZAO_CLIENTE);
		sb.append(",FANTASIA="+FANTASIA);
		sb.append(",ENDERECO="+ENDERECO);
		sb.append(",NRO="+NRO);
		sb.append(",BAIRRO="+BAIRRO);
		sb.append(",COD_CIDADE="+COD_CIDADE);
		sb.append(",CEP="+CEP);
		sb.append(",CNPJ_CPF="+CNPJ_CPF);
		sb.append(",TIPO_CLIENTE="+TIPO_CLIENTE);
		sb.append(",DATA_CADASTRO="+String.valueOf(DATA_CADASTRO));
		sb.append(",SITUACAO="+SITUACAO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CLIENTESStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.COD_EMPRESA, other.COD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ID_CLIENTE, other.ID_CLIENTE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		CLIENTESStruct CLIENTES = new CLIENTESStruct();




	
	/**
	 * [tAdvancedHash_CLIENTES begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_CLIENTES", false);
		start_Hash.put("tAdvancedHash_CLIENTES", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_CLIENTES";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CLIENTES");
					}
				
		int tos_count_tAdvancedHash_CLIENTES = 0;
		

			   		// connection name:CLIENTES
			   		// source node:tDBInput_4 - inputs:(after_tDBInput_1) outputs:(CLIENTES,CLIENTES) | target node:tAdvancedHash_CLIENTES - inputs:(CLIENTES) outputs:()
			   		// linked node: tMap_1 - inputs:(EMPRESA,NOTA_FISCAL,ITEM,CLIENTES,MATERIAL) outputs:(SAIDA)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_CLIENTES = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CLIENTESStruct> tHash_Lookup_CLIENTES =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<CLIENTESStruct>getLookup(matchingModeEnum_CLIENTES);
	   						   
		   	   	   globalMap.put("tHash_Lookup_CLIENTES", tHash_Lookup_CLIENTES);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_CLIENTES begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_4  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4); 
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "ETLBI";
				
				 
	final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:xuvldSlCpwkGRB/9mnYGM19OESlDUZ6z+nT57Y5CVoKqxknr");
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
		    String port_tDBInput_4 = "1433";
		    String dbname_tDBInput_4 = "DW" ;
			String url_tDBInput_4 = "jdbc:jtds:sqlserver://" + "DESKTOP-SKA0L5T" ;
		    if (!"".equals(port_tDBInput_4)) {
		    	url_tDBInput_4 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_4)) {
				url_tDBInput_4 += "//" + "DW"; 
		    }
		    url_tDBInput_4 += ";appName=" + projectName + ";" + "INSTANCE=OLAP";
		    String dbschema_tDBInput_4 = "dbo";
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT dbo.DIM_CLIENTES.SK_CLIENTE,\n		dbo.DIM_CLIENTES.COD_EMPRESA,\n		dbo.DIM_CLIENTES.ID_CLIENTE,\n		dbo.DIM_CLIENTES.R"
+"AZAO_CLIENTE,\n		dbo.DIM_CLIENTES.FANTASIA,\n		dbo.DIM_CLIENTES.ENDERECO,\n		dbo.DIM_CLIENTES.NRO,\n		dbo.DIM_CLIENTES.BAIRR"
+"O,\n		dbo.DIM_CLIENTES.COD_CIDADE,\n		dbo.DIM_CLIENTES.CEP,\n		dbo.DIM_CLIENTES.CNPJ_CPF,\n		dbo.DIM_CLIENTES.TIPO_CLIENTE,\n"
+"		dbo.DIM_CLIENTES.DATA_CADASTRO,\n		dbo.DIM_CLIENTES.SITUACAO\nFROM	dbo.DIM_CLIENTES";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								CLIENTES.SK_CLIENTE = 0;
							} else {
		                          
            CLIENTES.SK_CLIENTE = rs_tDBInput_4.getInt(1);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								CLIENTES.COD_EMPRESA = 0;
							} else {
		                          
            CLIENTES.COD_EMPRESA = rs_tDBInput_4.getInt(2);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								CLIENTES.ID_CLIENTE = 0;
							} else {
		                          
            CLIENTES.ID_CLIENTE = rs_tDBInput_4.getInt(3);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								CLIENTES.RAZAO_CLIENTE = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(4);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		CLIENTES.RAZAO_CLIENTE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	CLIENTES.RAZAO_CLIENTE = tmpContent_tDBInput_4;
                }
            } else {
                CLIENTES.RAZAO_CLIENTE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								CLIENTES.FANTASIA = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(5);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		CLIENTES.FANTASIA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	CLIENTES.FANTASIA = tmpContent_tDBInput_4;
                }
            } else {
                CLIENTES.FANTASIA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								CLIENTES.ENDERECO = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(6);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		CLIENTES.ENDERECO = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	CLIENTES.ENDERECO = tmpContent_tDBInput_4;
                }
            } else {
                CLIENTES.ENDERECO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								CLIENTES.NRO = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(7);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
            		CLIENTES.NRO = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	CLIENTES.NRO = tmpContent_tDBInput_4;
                }
            } else {
                CLIENTES.NRO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 8) {
								CLIENTES.BAIRRO = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(8);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		CLIENTES.BAIRRO = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	CLIENTES.BAIRRO = tmpContent_tDBInput_4;
                }
            } else {
                CLIENTES.BAIRRO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 9) {
								CLIENTES.COD_CIDADE = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(9);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
            		CLIENTES.COD_CIDADE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	CLIENTES.COD_CIDADE = tmpContent_tDBInput_4;
                }
            } else {
                CLIENTES.COD_CIDADE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 10) {
								CLIENTES.CEP = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(10);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
            		CLIENTES.CEP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	CLIENTES.CEP = tmpContent_tDBInput_4;
                }
            } else {
                CLIENTES.CEP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 11) {
								CLIENTES.CNPJ_CPF = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(11);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
            		CLIENTES.CNPJ_CPF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	CLIENTES.CNPJ_CPF = tmpContent_tDBInput_4;
                }
            } else {
                CLIENTES.CNPJ_CPF = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 12) {
								CLIENTES.TIPO_CLIENTE = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(12);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
            		CLIENTES.TIPO_CLIENTE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	CLIENTES.TIPO_CLIENTE = tmpContent_tDBInput_4;
                }
            } else {
                CLIENTES.TIPO_CLIENTE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 13) {
								CLIENTES.DATA_CADASTRO = null;
							} else {
										
			CLIENTES.DATA_CADASTRO = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 13);
			
		                    }
							if(colQtyInRs_tDBInput_4 < 14) {
								CLIENTES.SITUACAO = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(14);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
            		CLIENTES.SITUACAO = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	CLIENTES.SITUACAO = tmpContent_tDBInput_4;
                }
            } else {
                CLIENTES.SITUACAO = null;
            }
		                    }
					





 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_CLIENTES main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_CLIENTES";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"CLIENTES");
					}
					


			   
			   

					CLIENTESStruct CLIENTES_HashRow = new CLIENTESStruct();
		   	   	   
				
				CLIENTES_HashRow.SK_CLIENTE = CLIENTES.SK_CLIENTE;
				
				CLIENTES_HashRow.COD_EMPRESA = CLIENTES.COD_EMPRESA;
				
				CLIENTES_HashRow.ID_CLIENTE = CLIENTES.ID_CLIENTE;
				
				CLIENTES_HashRow.RAZAO_CLIENTE = CLIENTES.RAZAO_CLIENTE;
				
				CLIENTES_HashRow.FANTASIA = CLIENTES.FANTASIA;
				
				CLIENTES_HashRow.ENDERECO = CLIENTES.ENDERECO;
				
				CLIENTES_HashRow.NRO = CLIENTES.NRO;
				
				CLIENTES_HashRow.BAIRRO = CLIENTES.BAIRRO;
				
				CLIENTES_HashRow.COD_CIDADE = CLIENTES.COD_CIDADE;
				
				CLIENTES_HashRow.CEP = CLIENTES.CEP;
				
				CLIENTES_HashRow.CNPJ_CPF = CLIENTES.CNPJ_CPF;
				
				CLIENTES_HashRow.TIPO_CLIENTE = CLIENTES.TIPO_CLIENTE;
				
				CLIENTES_HashRow.DATA_CADASTRO = CLIENTES.DATA_CADASTRO;
				
				CLIENTES_HashRow.SITUACAO = CLIENTES.SITUACAO;
				
			tHash_Lookup_CLIENTES.put(CLIENTES_HashRow);
			
            




 


	tos_count_tAdvancedHash_CLIENTES++;

/**
 * [tAdvancedHash_CLIENTES main ] stop
 */
	
	/**
	 * [tAdvancedHash_CLIENTES process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_CLIENTES";

	

 



/**
 * [tAdvancedHash_CLIENTES process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_CLIENTES process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_CLIENTES";

	

 



/**
 * [tAdvancedHash_CLIENTES process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
		if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
			
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_CLIENTES end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_CLIENTES";

	

tHash_Lookup_CLIENTES.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CLIENTES");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_CLIENTES", true);
end_Hash.put("tAdvancedHash_CLIENTES", System.currentTimeMillis());




/**
 * [tAdvancedHash_CLIENTES end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_CLIENTES finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_CLIENTES";

	

 



/**
 * [tAdvancedHash_CLIENTES finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class MATERIALStruct implements routines.system.IPersistableComparableLookupRow<MATERIALStruct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_FATO_VENDA = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_FATO_VENDA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SK_MAT;

				public int getSK_MAT () {
					return this.SK_MAT;
				}
				
			    public int SK_EMPRESA;

				public int getSK_EMPRESA () {
					return this.SK_EMPRESA;
				}
				
			    public int SK_TIP_MAT;

				public int getSK_TIP_MAT () {
					return this.SK_TIP_MAT;
				}
				
			    public int SK_LINHA_PROD;

				public int getSK_LINHA_PROD () {
					return this.SK_LINHA_PROD;
				}
				
			    public int SK_SUB_CATEG;

				public int getSK_SUB_CATEG () {
					return this.SK_SUB_CATEG;
				}
				
			    public int COD_EMPRESA;

				public int getCOD_EMPRESA () {
					return this.COD_EMPRESA;
				}
				
			    public int COD_MAT;

				public int getCOD_MAT () {
					return this.COD_MAT;
				}
				
			    public String DESCRICAO;

				public String getDESCRICAO () {
					return this.DESCRICAO;
				}
				
			    public BigDecimal PRECO_UNIT;

				public BigDecimal getPRECO_UNIT () {
					return this.PRECO_UNIT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SK_EMPRESA;
						
							result = prime * result + (int) this.COD_MAT;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final MATERIALStruct other = (MATERIALStruct) obj;
		
						if (this.SK_EMPRESA != other.SK_EMPRESA)
							return false;
					
						if (this.COD_MAT != other.COD_MAT)
							return false;
					

		return true;
    }

	public void copyDataTo(MATERIALStruct other) {

		other.SK_MAT = this.SK_MAT;
	            other.SK_EMPRESA = this.SK_EMPRESA;
	            other.SK_TIP_MAT = this.SK_TIP_MAT;
	            other.SK_LINHA_PROD = this.SK_LINHA_PROD;
	            other.SK_SUB_CATEG = this.SK_SUB_CATEG;
	            other.COD_EMPRESA = this.COD_EMPRESA;
	            other.COD_MAT = this.COD_MAT;
	            other.DESCRICAO = this.DESCRICAO;
	            other.PRECO_UNIT = this.PRECO_UNIT;
	            
	}

	public void copyKeysDataTo(MATERIALStruct other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            	other.COD_MAT = this.COD_MAT;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_FATO_VENDA) {

        	try {

        		int length = 0;
		
			        this.SK_EMPRESA = dis.readInt();
					
			        this.COD_MAT = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.COD_MAT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.SK_MAT = dis.readInt();
					
			            this.SK_TIP_MAT = dis.readInt();
					
			            this.SK_LINHA_PROD = dis.readInt();
					
			            this.SK_SUB_CATEG = dis.readInt();
					
			            this.COD_EMPRESA = dis.readInt();
					
						this.DESCRICAO = readString(dis,ois);
					
       			    	this.PRECO_UNIT = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.SK_MAT);
					
		            	dos.writeInt(this.SK_TIP_MAT);
					
		            	dos.writeInt(this.SK_LINHA_PROD);
					
		            	dos.writeInt(this.SK_SUB_CATEG);
					
		            	dos.writeInt(this.COD_EMPRESA);
					
						writeString(this.DESCRICAO, dos, oos);
					
       			    	oos.writeObject(this.PRECO_UNIT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_MAT="+String.valueOf(SK_MAT));
		sb.append(",SK_EMPRESA="+String.valueOf(SK_EMPRESA));
		sb.append(",SK_TIP_MAT="+String.valueOf(SK_TIP_MAT));
		sb.append(",SK_LINHA_PROD="+String.valueOf(SK_LINHA_PROD));
		sb.append(",SK_SUB_CATEG="+String.valueOf(SK_SUB_CATEG));
		sb.append(",COD_EMPRESA="+String.valueOf(COD_EMPRESA));
		sb.append(",COD_MAT="+String.valueOf(COD_MAT));
		sb.append(",DESCRICAO="+DESCRICAO);
		sb.append(",PRECO_UNIT="+String.valueOf(PRECO_UNIT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(MATERIALStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SK_EMPRESA, other.SK_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.COD_MAT, other.COD_MAT);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		MATERIALStruct MATERIAL = new MATERIALStruct();




	
	/**
	 * [tAdvancedHash_MATERIAL begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_MATERIAL", false);
		start_Hash.put("tAdvancedHash_MATERIAL", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_MATERIAL";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"MATERIAL");
					}
				
		int tos_count_tAdvancedHash_MATERIAL = 0;
		

			   		// connection name:MATERIAL
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_1) outputs:(MATERIAL,MATERIAL) | target node:tAdvancedHash_MATERIAL - inputs:(MATERIAL) outputs:()
			   		// linked node: tMap_1 - inputs:(EMPRESA,NOTA_FISCAL,ITEM,CLIENTES,MATERIAL) outputs:(SAIDA)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_MATERIAL = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<MATERIALStruct> tHash_Lookup_MATERIAL =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<MATERIALStruct>getLookup(matchingModeEnum_MATERIAL);
	   						   
		   	   	   globalMap.put("tHash_Lookup_MATERIAL", tHash_Lookup_MATERIAL);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_MATERIAL begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_5  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5); 
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "ETLBI";
				
				 
	final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:tGV4BhCa0RnWUG9WfyUB3B7XScoKBWJxNnXVym8o/cckUAOn");
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
		    String port_tDBInput_5 = "1433";
		    String dbname_tDBInput_5 = "DW" ;
			String url_tDBInput_5 = "jdbc:jtds:sqlserver://" + "DESKTOP-SKA0L5T" ;
		    if (!"".equals(port_tDBInput_5)) {
		    	url_tDBInput_5 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_5)) {
				url_tDBInput_5 += "//" + "DW"; 
		    }
		    url_tDBInput_5 += ";appName=" + projectName + ";" + "INSTANCE=OLAP";
		    String dbschema_tDBInput_5 = "dbo";
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT dbo.DIM_MATERIAL.SK_MAT,\n		dbo.DIM_MATERIAL.SK_EMPRESA,\n		dbo.DIM_MATERIAL.SK_TIP_MAT,\n		dbo.DIM_MATERIAL.SK_LIN"
+"HA_PROD,\n		dbo.DIM_MATERIAL.SK_SUB_CATEG,\n		dbo.DIM_MATERIAL.COD_EMPRESA,\n		dbo.DIM_MATERIAL.COD_MAT,\n		dbo.DIM_MATERIAL"
+".DESCRICAO,\n		dbo.DIM_MATERIAL.PRECO_UNIT\nFROM	dbo.DIM_MATERIAL";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								MATERIAL.SK_MAT = 0;
							} else {
		                          
            MATERIAL.SK_MAT = rs_tDBInput_5.getInt(1);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								MATERIAL.SK_EMPRESA = 0;
							} else {
		                          
            MATERIAL.SK_EMPRESA = rs_tDBInput_5.getInt(2);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								MATERIAL.SK_TIP_MAT = 0;
							} else {
		                          
            MATERIAL.SK_TIP_MAT = rs_tDBInput_5.getInt(3);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								MATERIAL.SK_LINHA_PROD = 0;
							} else {
		                          
            MATERIAL.SK_LINHA_PROD = rs_tDBInput_5.getInt(4);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								MATERIAL.SK_SUB_CATEG = 0;
							} else {
		                          
            MATERIAL.SK_SUB_CATEG = rs_tDBInput_5.getInt(5);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 6) {
								MATERIAL.COD_EMPRESA = 0;
							} else {
		                          
            MATERIAL.COD_EMPRESA = rs_tDBInput_5.getInt(6);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 7) {
								MATERIAL.COD_MAT = 0;
							} else {
		                          
            MATERIAL.COD_MAT = rs_tDBInput_5.getInt(7);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 8) {
								MATERIAL.DESCRICAO = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(8);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		MATERIAL.DESCRICAO = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	MATERIAL.DESCRICAO = tmpContent_tDBInput_5;
                }
            } else {
                MATERIAL.DESCRICAO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 9) {
								MATERIAL.PRECO_UNIT = null;
							} else {
		                          
            MATERIAL.PRECO_UNIT = rs_tDBInput_5.getBigDecimal(9);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					





 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_MATERIAL main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_MATERIAL";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"MATERIAL");
					}
					


			   
			   

					MATERIALStruct MATERIAL_HashRow = new MATERIALStruct();
		   	   	   
				
				MATERIAL_HashRow.SK_MAT = MATERIAL.SK_MAT;
				
				MATERIAL_HashRow.SK_EMPRESA = MATERIAL.SK_EMPRESA;
				
				MATERIAL_HashRow.SK_TIP_MAT = MATERIAL.SK_TIP_MAT;
				
				MATERIAL_HashRow.SK_LINHA_PROD = MATERIAL.SK_LINHA_PROD;
				
				MATERIAL_HashRow.SK_SUB_CATEG = MATERIAL.SK_SUB_CATEG;
				
				MATERIAL_HashRow.COD_EMPRESA = MATERIAL.COD_EMPRESA;
				
				MATERIAL_HashRow.COD_MAT = MATERIAL.COD_MAT;
				
				MATERIAL_HashRow.DESCRICAO = MATERIAL.DESCRICAO;
				
				MATERIAL_HashRow.PRECO_UNIT = MATERIAL.PRECO_UNIT;
				
			tHash_Lookup_MATERIAL.put(MATERIAL_HashRow);
			
            




 


	tos_count_tAdvancedHash_MATERIAL++;

/**
 * [tAdvancedHash_MATERIAL main ] stop
 */
	
	/**
	 * [tAdvancedHash_MATERIAL process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_MATERIAL";

	

 



/**
 * [tAdvancedHash_MATERIAL process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_MATERIAL process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_MATERIAL";

	

 



/**
 * [tAdvancedHash_MATERIAL process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
		if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
			
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);

 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_MATERIAL end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_MATERIAL";

	

tHash_Lookup_MATERIAL.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"MATERIAL");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_MATERIAL", true);
end_Hash.put("tAdvancedHash_MATERIAL", System.currentTimeMillis());




/**
 * [tAdvancedHash_MATERIAL end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_MATERIAL finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_MATERIAL";

	

 



/**
 * [tAdvancedHash_MATERIAL finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBRow_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";

	
		int tos_count_tDBRow_1 = 0;
		

	java.sql.Connection conn_tDBRow_1 = null;
	String query_tDBRow_1 = "";
	boolean whetherReject_tDBRow_1 = false;
			String driverClass_tDBRow_1 = "net.sourceforge.jtds.jdbc.Driver";
		    java.lang.Class jdbcclazz_tDBRow_1 = java.lang.Class.forName(driverClass_tDBRow_1);
		
			String port_tDBRow_1 = "1433";
		    String dbname_tDBRow_1 = "DW" ;
		    
			String url_tDBRow_1 = "jdbc:jtds:sqlserver://" + "DESKTOP-SKA0L5T" ;
			
		    if (!"".equals(port_tDBRow_1)) {
		    	url_tDBRow_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBRow_1)) {
		   	
				url_tDBRow_1 += "//" + "DW"; 
			
		    }
		    url_tDBRow_1 += ";appName=" + projectName + ";" + "INSTANCE=OLAP";
		
					String dbUser_tDBRow_1 = "ETLBI";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:zcpLlIqnUAbivyuKEAc7zkOTmjtxe6F/7XD9ADQxIx290Y4I");
        		   	
        	        String dbPwd_tDBRow_1 = decryptedPassword_tDBRow_1;
	        
					
			conn_tDBRow_1 = java.sql.DriverManager.getConnection(url_tDBRow_1,dbUser_tDBRow_1,dbPwd_tDBRow_1);
		
    resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
					if(conn_tDBRow_1.getAutoCommit()) {
						
				conn_tDBRow_1.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_1 = 10000;
					int commitCounter_tDBRow_1 = 0;
				
        java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
        resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);

 



/**
 * [tDBRow_1 begin ] stop
 */
	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

query_tDBRow_1 = "UPDATE FATO_VENDA SET VAL_CUSTO=(SELECT A.CUSTO_MEDIO \nFROM DIM_MATERIAL_CUSTO A\nWHERE FATO_VENDA.SK_EMPRESA=A.SK_EMP"
+"RESA\nAND FATO_VENDA.SK_MAT=A.SK_MAT\nAND CAST(FATO_VENDA.DATA_EMISSAO AS DATE) >=A.DATA_INI \nAND CAST(FATO_VENDA.DATA_"
+"EMISSAO AS DATE)<=A.DATA_FIM)";
whetherReject_tDBRow_1 = false;
globalMap.put("tDBRow_1_QUERY",query_tDBRow_1);
try {
		stmt_tDBRow_1.execute(query_tDBRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_1) {
		
	}
	
		commitCounter_tDBRow_1++;
		if(commitEvery_tDBRow_1 <= commitCounter_tDBRow_1) {
			
			conn_tDBRow_1.commit();
			
			commitCounter_tDBRow_1=0;
		}
		

 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

	
        stmt_tDBRow_1.close();
        resourceMap.remove("stmt_tDBRow_1");
    resourceMap.put("statementClosed_tDBRow_1", true);
		if(commitEvery_tDBRow_1>commitCounter_tDBRow_1){

			
			conn_tDBRow_1.commit();
			
	
			commitCounter_tDBRow_1=0;
	
		}
			conn_tDBRow_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
    resourceMap.put("finish_tDBRow_1", true);
 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());




/**
 * [tDBRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBRow_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_1") == null) {
            java.sql.Statement stmtToClose_tDBRow_1 = null;
            if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
                stmtToClose_tDBRow_1.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_1") == null){
            java.sql.Connection ctn_tDBRow_1 = null;
            if((ctn_tDBRow_1 = (java.sql.Connection)resourceMap.get("conn_tDBRow_1")) != null){
                try {
                    ctn_tDBRow_1.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_1) {
                    String errorMessage_tDBRow_1 = "failed to close the connection in tDBRow_1 :" + sqlEx_tDBRow_1.getMessage();
                    System.err.println(errorMessage_tDBRow_1);
                }
            }
        }
    }
 



/**
 * [tDBRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_2", false);
		start_Hash.put("tDBRow_2", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_2";

	
		int tos_count_tDBRow_2 = 0;
		

	java.sql.Connection conn_tDBRow_2 = null;
	String query_tDBRow_2 = "";
	boolean whetherReject_tDBRow_2 = false;
			String driverClass_tDBRow_2 = "net.sourceforge.jtds.jdbc.Driver";
		    java.lang.Class jdbcclazz_tDBRow_2 = java.lang.Class.forName(driverClass_tDBRow_2);
		
			String port_tDBRow_2 = "1433";
		    String dbname_tDBRow_2 = "DW" ;
		    
			String url_tDBRow_2 = "jdbc:jtds:sqlserver://" + "DESKTOP-SKA0L5T" ;
			
		    if (!"".equals(port_tDBRow_2)) {
		    	url_tDBRow_2 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBRow_2)) {
		   	
				url_tDBRow_2 += "//" + "DW"; 
			
		    }
		    url_tDBRow_2 += ";appName=" + projectName + ";" + "INSTANCE=OLAP";
		
					String dbUser_tDBRow_2 = "ETLBI";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:5gRAwRSBSQ7ftXdtDvpfekMhDcFt8UDodCJ8wNHlIKIi3R4y");
        		   	
        	        String dbPwd_tDBRow_2 = decryptedPassword_tDBRow_2;
	        
					
			conn_tDBRow_2 = java.sql.DriverManager.getConnection(url_tDBRow_2,dbUser_tDBRow_2,dbPwd_tDBRow_2);
		
    resourceMap.put("conn_tDBRow_2", conn_tDBRow_2);
					if(conn_tDBRow_2.getAutoCommit()) {
						
				conn_tDBRow_2.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_2 = 10000;
					int commitCounter_tDBRow_2 = 0;
				
        java.sql.Statement stmt_tDBRow_2 = conn_tDBRow_2.createStatement();
        resourceMap.put("stmt_tDBRow_2", stmt_tDBRow_2);

 



/**
 * [tDBRow_2 begin ] stop
 */
	
	/**
	 * [tDBRow_2 main ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

query_tDBRow_2 = "UPDATE FATO_VENDA SET VAL_CUSTO=(SELECT A.PRECO_UNIT*.90\nFROM DIM_MATERIAL A\nWHERE FATO_VENDA.SK_EMPRESA=A.SK_EMPRESA"
+"\nAND FATO_VENDA.SK_MAT=A.SK_MAT)\nWHERE FATO_VENDA.VAL_CUSTO IS NULL";
whetherReject_tDBRow_2 = false;
globalMap.put("tDBRow_2_QUERY",query_tDBRow_2);
try {
		stmt_tDBRow_2.execute(query_tDBRow_2);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_2 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tDBRow_2++;
		if(commitEvery_tDBRow_2 <= commitCounter_tDBRow_2) {
			
			conn_tDBRow_2.commit();
			
			commitCounter_tDBRow_2=0;
		}
		

 


	tos_count_tDBRow_2++;

/**
 * [tDBRow_2 main ] stop
 */
	
	/**
	 * [tDBRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

 



/**
 * [tDBRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

 



/**
 * [tDBRow_2 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_2 end ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

	
        stmt_tDBRow_2.close();
        resourceMap.remove("stmt_tDBRow_2");
    resourceMap.put("statementClosed_tDBRow_2", true);
		if(commitEvery_tDBRow_2>commitCounter_tDBRow_2){

			
			conn_tDBRow_2.commit();
			
	
			commitCounter_tDBRow_2=0;
	
		}
			conn_tDBRow_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
    resourceMap.put("finish_tDBRow_2", true);
 

ok_Hash.put("tDBRow_2", true);
end_Hash.put("tDBRow_2", System.currentTimeMillis());




/**
 * [tDBRow_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_2 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_2") == null) {
            java.sql.Statement stmtToClose_tDBRow_2 = null;
            if ((stmtToClose_tDBRow_2 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_2")) != null) {
                stmtToClose_tDBRow_2.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_2") == null){
            java.sql.Connection ctn_tDBRow_2 = null;
            if((ctn_tDBRow_2 = (java.sql.Connection)resourceMap.get("conn_tDBRow_2")) != null){
                try {
                    ctn_tDBRow_2.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_2) {
                    String errorMessage_tDBRow_2 = "failed to close the connection in tDBRow_2 :" + sqlEx_tDBRow_2.getMessage();
                    System.err.println(errorMessage_tDBRow_2);
                }
            }
        }
    }
 



/**
 * [tDBRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final CARGA_FATO_VENDA CARGA_FATO_VENDAClass = new CARGA_FATO_VENDA();

        int exitCode = CARGA_FATO_VENDAClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = CARGA_FATO_VENDA.class.getClassLoader().getResourceAsStream("bi_forest/carga_fato_venda_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = CARGA_FATO_VENDA.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : CARGA_FATO_VENDA");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     236210 characters generated by Talend Open Studio for Data Integration 
 *     on the 19 de Maio de 2024 22h4min6s BRT
 ************************************************************************************************/