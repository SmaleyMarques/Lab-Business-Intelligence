// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package bi_forest.carga_fato_meta_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: CARGA_FATO_META Purpose: <br>
 * Description: REGISTRO DE META DE VENDAS VALOR <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class CARGA_FATO_META implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "CARGA_FATO_META";
	private final String projectName = "BI_FOREST";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				CARGA_FATO_META.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(CARGA_FATO_META.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_META_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_VENDEDOR_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_FATO_META = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_FATO_META = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SK_EMPRESA;

				public int getSK_EMPRESA () {
					return this.SK_EMPRESA;
				}
				
			    public int SK_VENDEDOR;

				public int getSK_VENDEDOR () {
					return this.SK_VENDEDOR;
				}
				
			    public java.util.Date DATA_REF;

				public java.util.Date getDATA_REF () {
					return this.DATA_REF;
				}
				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SK_EMPRESA;
						
							result = prime * result + (int) this.SK_VENDEDOR;
						
						result = prime * result + ((this.DATA_REF == null) ? 0 : this.DATA_REF.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.SK_EMPRESA != other.SK_EMPRESA)
							return false;
					
						if (this.SK_VENDEDOR != other.SK_VENDEDOR)
							return false;
					
						if (this.DATA_REF == null) {
							if (other.DATA_REF != null)
								return false;
						
						} else if (!this.DATA_REF.equals(other.DATA_REF))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            other.SK_VENDEDOR = this.SK_VENDEDOR;
	            other.DATA_REF = this.DATA_REF;
	            other.VALOR = this.VALOR;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            	other.SK_VENDEDOR = this.SK_VENDEDOR;
	            	other.DATA_REF = this.DATA_REF;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_FATO_META) {

        	try {

        		int length = 0;
		
			        this.SK_EMPRESA = dis.readInt();
					
			        this.SK_VENDEDOR = dis.readInt();
					
					this.DATA_REF = readDate(dis);
					
						this.VALOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.SK_VENDEDOR);
					
					// java.util.Date
				
						writeDate(this.DATA_REF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_EMPRESA="+String.valueOf(SK_EMPRESA));
		sb.append(",SK_VENDEDOR="+String.valueOf(SK_VENDEDOR));
		sb.append(",DATA_REF="+String.valueOf(DATA_REF));
		sb.append(",VALOR="+String.valueOf(VALOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SK_EMPRESA, other.SK_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SK_VENDEDOR, other.SK_VENDEDOR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DATA_REF, other.DATA_REF);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_FATO_META = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_FATO_META = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SK_EMPRESA;

				public int getSK_EMPRESA () {
					return this.SK_EMPRESA;
				}
				
			    public int SK_VENDEDOR;

				public int getSK_VENDEDOR () {
					return this.SK_VENDEDOR;
				}
				
			    public java.util.Date DATA_REF;

				public java.util.Date getDATA_REF () {
					return this.DATA_REF;
				}
				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SK_EMPRESA;
						
							result = prime * result + (int) this.SK_VENDEDOR;
						
						result = prime * result + ((this.DATA_REF == null) ? 0 : this.DATA_REF.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OnRowsEndStructtAggregateRow_1 other = (OnRowsEndStructtAggregateRow_1) obj;
		
						if (this.SK_EMPRESA != other.SK_EMPRESA)
							return false;
					
						if (this.SK_VENDEDOR != other.SK_VENDEDOR)
							return false;
					
						if (this.DATA_REF == null) {
							if (other.DATA_REF != null)
								return false;
						
						} else if (!this.DATA_REF.equals(other.DATA_REF))
						
							return false;
					

		return true;
    }

	public void copyDataTo(OnRowsEndStructtAggregateRow_1 other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            other.SK_VENDEDOR = this.SK_VENDEDOR;
	            other.DATA_REF = this.DATA_REF;
	            other.VALOR = this.VALOR;
	            
	}

	public void copyKeysDataTo(OnRowsEndStructtAggregateRow_1 other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            	other.SK_VENDEDOR = this.SK_VENDEDOR;
	            	other.DATA_REF = this.DATA_REF;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_FATO_META) {

        	try {

        		int length = 0;
		
			        this.SK_EMPRESA = dis.readInt();
					
			        this.SK_VENDEDOR = dis.readInt();
					
					this.DATA_REF = readDate(dis);
					
						this.VALOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.SK_VENDEDOR);
					
					// java.util.Date
				
						writeDate(this.DATA_REF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_EMPRESA="+String.valueOf(SK_EMPRESA));
		sb.append(",SK_VENDEDOR="+String.valueOf(SK_VENDEDOR));
		sb.append(",DATA_REF="+String.valueOf(DATA_REF));
		sb.append(",VALOR="+String.valueOf(VALOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SK_EMPRESA, other.SK_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SK_VENDEDOR, other.SK_VENDEDOR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DATA_REF, other.DATA_REF);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class SAIDAStruct implements routines.system.IPersistableRow<SAIDAStruct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_FATO_META = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_FATO_META = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SK_EMPRESA;

				public int getSK_EMPRESA () {
					return this.SK_EMPRESA;
				}
				
			    public int SK_VENDEDOR;

				public int getSK_VENDEDOR () {
					return this.SK_VENDEDOR;
				}
				
			    public java.util.Date DATA_REF;

				public java.util.Date getDATA_REF () {
					return this.DATA_REF;
				}
				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SK_EMPRESA;
						
							result = prime * result + (int) this.SK_VENDEDOR;
						
						result = prime * result + ((this.DATA_REF == null) ? 0 : this.DATA_REF.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final SAIDAStruct other = (SAIDAStruct) obj;
		
						if (this.SK_EMPRESA != other.SK_EMPRESA)
							return false;
					
						if (this.SK_VENDEDOR != other.SK_VENDEDOR)
							return false;
					
						if (this.DATA_REF == null) {
							if (other.DATA_REF != null)
								return false;
						
						} else if (!this.DATA_REF.equals(other.DATA_REF))
						
							return false;
					

		return true;
    }

	public void copyDataTo(SAIDAStruct other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            other.SK_VENDEDOR = this.SK_VENDEDOR;
	            other.DATA_REF = this.DATA_REF;
	            other.VALOR = this.VALOR;
	            
	}

	public void copyKeysDataTo(SAIDAStruct other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            	other.SK_VENDEDOR = this.SK_VENDEDOR;
	            	other.DATA_REF = this.DATA_REF;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_FATO_META) {

        	try {

        		int length = 0;
		
			        this.SK_EMPRESA = dis.readInt();
					
			        this.SK_VENDEDOR = dis.readInt();
					
					this.DATA_REF = readDate(dis);
					
						this.VALOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.SK_VENDEDOR);
					
					// java.util.Date
				
						writeDate(this.DATA_REF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_EMPRESA="+String.valueOf(SK_EMPRESA));
		sb.append(",SK_VENDEDOR="+String.valueOf(SK_VENDEDOR));
		sb.append(",DATA_REF="+String.valueOf(DATA_REF));
		sb.append(",VALOR="+String.valueOf(VALOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(SAIDAStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SK_EMPRESA, other.SK_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SK_VENDEDOR, other.SK_VENDEDOR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DATA_REF, other.DATA_REF);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EMPRESAStruct implements routines.system.IPersistableRow<EMPRESAStruct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_FATO_META = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_FATO_META = new byte[0];

	
			    public int SK_EMPRESA;

				public int getSK_EMPRESA () {
					return this.SK_EMPRESA;
				}
				
			    public int COD_EMPRESA;

				public int getCOD_EMPRESA () {
					return this.COD_EMPRESA;
				}
				
			    public String NOME_EMPRESA;

				public String getNOME_EMPRESA () {
					return this.NOME_EMPRESA;
				}
				
			    public String FANTASIA;

				public String getFANTASIA () {
					return this.FANTASIA;
				}
				
			    public String CNPJ;

				public String getCNPJ () {
					return this.CNPJ;
				}
				
			    public String ENDERECO;

				public String getENDERECO () {
					return this.ENDERECO;
				}
				
			    public String COD_CIDADE;

				public String getCOD_CIDADE () {
					return this.COD_CIDADE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BI_FOREST_CARGA_FATO_META.length) {
				if(length < 1024 && commonByteArray_BI_FOREST_CARGA_FATO_META.length == 0) {
   					commonByteArray_BI_FOREST_CARGA_FATO_META = new byte[1024];
				} else {
   					commonByteArray_BI_FOREST_CARGA_FATO_META = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BI_FOREST_CARGA_FATO_META, 0, length);
			strReturn = new String(commonByteArray_BI_FOREST_CARGA_FATO_META, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_FATO_META) {

        	try {

        		int length = 0;
		
			        this.SK_EMPRESA = dis.readInt();
					
			        this.COD_EMPRESA = dis.readInt();
					
					this.NOME_EMPRESA = readString(dis);
					
					this.FANTASIA = readString(dis);
					
					this.CNPJ = readString(dis);
					
					this.ENDERECO = readString(dis);
					
					this.COD_CIDADE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.COD_EMPRESA);
					
					// String
				
						writeString(this.NOME_EMPRESA,dos);
					
					// String
				
						writeString(this.FANTASIA,dos);
					
					// String
				
						writeString(this.CNPJ,dos);
					
					// String
				
						writeString(this.ENDERECO,dos);
					
					// String
				
						writeString(this.COD_CIDADE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_EMPRESA="+String.valueOf(SK_EMPRESA));
		sb.append(",COD_EMPRESA="+String.valueOf(COD_EMPRESA));
		sb.append(",NOME_EMPRESA="+NOME_EMPRESA);
		sb.append(",FANTASIA="+FANTASIA);
		sb.append(",CNPJ="+CNPJ);
		sb.append(",ENDERECO="+ENDERECO);
		sb.append(",COD_CIDADE="+COD_CIDADE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(EMPRESAStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_FATO_META = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_FATO_META = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SK_EMPRESA;

				public int getSK_EMPRESA () {
					return this.SK_EMPRESA;
				}
				
			    public int COD_EMPRESA;

				public int getCOD_EMPRESA () {
					return this.COD_EMPRESA;
				}
				
			    public String NOME_EMPRESA;

				public String getNOME_EMPRESA () {
					return this.NOME_EMPRESA;
				}
				
			    public String FANTASIA;

				public String getFANTASIA () {
					return this.FANTASIA;
				}
				
			    public String CNPJ;

				public String getCNPJ () {
					return this.CNPJ;
				}
				
			    public String ENDERECO;

				public String getENDERECO () {
					return this.ENDERECO;
				}
				
			    public String COD_CIDADE;

				public String getCOD_CIDADE () {
					return this.COD_CIDADE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SK_EMPRESA;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_1Struct other = (after_tDBInput_1Struct) obj;
		
						if (this.SK_EMPRESA != other.SK_EMPRESA)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_1Struct other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            other.COD_EMPRESA = this.COD_EMPRESA;
	            other.NOME_EMPRESA = this.NOME_EMPRESA;
	            other.FANTASIA = this.FANTASIA;
	            other.CNPJ = this.CNPJ;
	            other.ENDERECO = this.ENDERECO;
	            other.COD_CIDADE = this.COD_CIDADE;
	            
	}

	public void copyKeysDataTo(after_tDBInput_1Struct other) {

		other.SK_EMPRESA = this.SK_EMPRESA;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BI_FOREST_CARGA_FATO_META.length) {
				if(length < 1024 && commonByteArray_BI_FOREST_CARGA_FATO_META.length == 0) {
   					commonByteArray_BI_FOREST_CARGA_FATO_META = new byte[1024];
				} else {
   					commonByteArray_BI_FOREST_CARGA_FATO_META = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BI_FOREST_CARGA_FATO_META, 0, length);
			strReturn = new String(commonByteArray_BI_FOREST_CARGA_FATO_META, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_FATO_META) {

        	try {

        		int length = 0;
		
			        this.SK_EMPRESA = dis.readInt();
					
			        this.COD_EMPRESA = dis.readInt();
					
					this.NOME_EMPRESA = readString(dis);
					
					this.FANTASIA = readString(dis);
					
					this.CNPJ = readString(dis);
					
					this.ENDERECO = readString(dis);
					
					this.COD_CIDADE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.COD_EMPRESA);
					
					// String
				
						writeString(this.NOME_EMPRESA,dos);
					
					// String
				
						writeString(this.FANTASIA,dos);
					
					// String
				
						writeString(this.CNPJ,dos);
					
					// String
				
						writeString(this.ENDERECO,dos);
					
					// String
				
						writeString(this.COD_CIDADE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_EMPRESA="+String.valueOf(SK_EMPRESA));
		sb.append(",COD_EMPRESA="+String.valueOf(COD_EMPRESA));
		sb.append(",NOME_EMPRESA="+NOME_EMPRESA);
		sb.append(",FANTASIA="+FANTASIA);
		sb.append(",CNPJ="+CNPJ);
		sb.append(",ENDERECO="+ENDERECO);
		sb.append(",COD_CIDADE="+COD_CIDADE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SK_EMPRESA, other.SK_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);
		tDBInput_3Process(globalMap);

		EMPRESAStruct EMPRESA = new EMPRESAStruct();
SAIDAStruct SAIDA = new SAIDAStruct();
row4Struct row4 = new row4Struct();





	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"SAIDA");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------
	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				int SK_EMPRESA;
    				int SK_VENDEDOR;
    				java.util.Date DATA_REF;
    				BigDecimal VALOR;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
								result = prime * result + (int) this.SK_EMPRESA;
							
								result = prime * result + (int) this.SK_VENDEDOR;
							
							result = prime * result + ((this.DATA_REF == null) ? 0 : this.DATA_REF.hashCode());
							
							result = prime * result + ((this.VALOR == null) ? 0 : this.VALOR.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.SK_EMPRESA != other.SK_EMPRESA) 
								return false;
						
							if (this.SK_VENDEDOR != other.SK_VENDEDOR) 
								return false;
						
							if (this.DATA_REF == null) {
								if (other.DATA_REF != null) 
									return false;
							} else if (!this.DATA_REF.equals(other.DATA_REF)) 
								return false;
						
							if (this.VALOR == null) {
								if (other.VALOR != null) 
									return false;
							} else if (!this.VALOR.equals(other.VALOR)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"EMPRESA");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<METAStruct> tHash_Lookup_META = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<METAStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<METAStruct>) 
					globalMap.get( "tHash_Lookup_META" ))
					;					
					
	

METAStruct METAHashKey = new METAStruct();
METAStruct METADefault = new METAStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<VENDEDORStruct> tHash_Lookup_VENDEDOR = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<VENDEDORStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<VENDEDORStruct>) 
					globalMap.get( "tHash_Lookup_VENDEDOR" ))
					;					
					
	

VENDEDORStruct VENDEDORHashKey = new VENDEDORStruct();
VENDEDORStruct VENDEDORDefault = new VENDEDORStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
SAIDAStruct SAIDA_tmp = new SAIDAStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "ETLBI";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:KbLm4s+h4g2FJaCc2dfCUAQYiZJTuu6hP+DgHbKz0uzRM+RI");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
		    String port_tDBInput_1 = "1433";
		    String dbname_tDBInput_1 = "DW" ;
			String url_tDBInput_1 = "jdbc:jtds:sqlserver://" + "DESKTOP-SKA0L5T" ;
		    if (!"".equals(port_tDBInput_1)) {
		    	url_tDBInput_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_1)) {
				url_tDBInput_1 += "//" + "DW"; 
		    }
		    url_tDBInput_1 += ";appName=" + projectName + ";" + "INSTANCE=OLAP";
		    String dbschema_tDBInput_1 = "dbo";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT dbo.DIM_EMPRESA.SK_EMPRESA,\n		dbo.DIM_EMPRESA.COD_EMPRESA,\n		dbo.DIM_EMPRESA.NOME_EMPRESA,\n		dbo.DIM_EMPRESA.FAN"
+"TASIA,\n		dbo.DIM_EMPRESA.CNPJ,\n		dbo.DIM_EMPRESA.ENDERECO,\n		dbo.DIM_EMPRESA.COD_CIDADE\nFROM	dbo.DIM_EMPRESA";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								EMPRESA.SK_EMPRESA = 0;
							} else {
		                          
            EMPRESA.SK_EMPRESA = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								EMPRESA.COD_EMPRESA = 0;
							} else {
		                          
            EMPRESA.COD_EMPRESA = rs_tDBInput_1.getInt(2);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								EMPRESA.NOME_EMPRESA = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		EMPRESA.NOME_EMPRESA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	EMPRESA.NOME_EMPRESA = tmpContent_tDBInput_1;
                }
            } else {
                EMPRESA.NOME_EMPRESA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								EMPRESA.FANTASIA = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		EMPRESA.FANTASIA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	EMPRESA.FANTASIA = tmpContent_tDBInput_1;
                }
            } else {
                EMPRESA.FANTASIA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								EMPRESA.CNPJ = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(5);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		EMPRESA.CNPJ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	EMPRESA.CNPJ = tmpContent_tDBInput_1;
                }
            } else {
                EMPRESA.CNPJ = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								EMPRESA.ENDERECO = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(6);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		EMPRESA.ENDERECO = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	EMPRESA.ENDERECO = tmpContent_tDBInput_1;
                }
            } else {
                EMPRESA.ENDERECO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								EMPRESA.COD_CIDADE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(7);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
            		EMPRESA.COD_CIDADE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	EMPRESA.COD_CIDADE = tmpContent_tDBInput_1;
                }
            } else {
                EMPRESA.COD_CIDADE = null;
            }
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"EMPRESA");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "META" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopMETA = false;
       		  	    	
       		  	    	
 							METAStruct METAObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_META__COD_EMPRESA = EMPRESA.COD_EMPRESA ;
	                        		    	if(exprKeyValue_META__COD_EMPRESA == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			METAHashKey.COD_EMPRESA = (int)(Integer) exprKeyValue_META__COD_EMPRESA;
                        		    		}
                        		    		

								
		                        	METAHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_META.lookup( METAHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_META.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLoopMETA = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLoopMETA = true;
			           		  	} // G 21
                    		  	
                    		

							METAStruct META = null;
                    		  	 
							

								while ((tHash_Lookup_META != null && tHash_Lookup_META.hasNext()) || forceLoopMETA) { // G_TM_M_043

								
									 // CALL close loop of lookup 'META'
									
                    		  	 
							   
                    		  	 
	       		  	    	METAStruct fromLookup_META = null;
							META = METADefault;
										 
							
								
								if(!forceLoopMETA) { // G 46
								
							
								 
							
								
								fromLookup_META = tHash_Lookup_META.next();

							

							if(fromLookup_META != null) {
								META = fromLookup_META;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLoopMETA = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "VENDEDOR" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopVENDEDOR = false;
       		  	    	
       		  	    	
 							VENDEDORStruct VENDEDORObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_VENDEDOR__COD_EMPRESA = META.COD_EMPRESA ;
	                        		    	if(exprKeyValue_VENDEDOR__COD_EMPRESA == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			VENDEDORHashKey.COD_EMPRESA = (int)(Integer) exprKeyValue_VENDEDOR__COD_EMPRESA;
                        		    		}
                        		    		
	                        		    	Object exprKeyValue_VENDEDOR__MATRICULA = META.MATRICULA_VEND ;
	                        		    	if(exprKeyValue_VENDEDOR__MATRICULA == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			VENDEDORHashKey.MATRICULA = (int)(Integer) exprKeyValue_VENDEDOR__MATRICULA;
                        		    		}
                        		    		

								
		                        	VENDEDORHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_VENDEDOR.lookup( VENDEDORHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_VENDEDOR.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLoopVENDEDOR = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLoopVENDEDOR = true;
			           		  	} // G 21
                    		  	
                    		

							VENDEDORStruct VENDEDOR = null;
                    		  	 
							

								while ((tHash_Lookup_VENDEDOR != null && tHash_Lookup_VENDEDOR.hasNext()) || forceLoopVENDEDOR) { // G_TM_M_043

								
									 // CALL close loop of lookup 'VENDEDOR'
									
                    		  	 
							   
                    		  	 
	       		  	    	VENDEDORStruct fromLookup_VENDEDOR = null;
							VENDEDOR = VENDEDORDefault;
										 
							
								
								if(!forceLoopVENDEDOR) { // G 46
								
							
								 
							
								
								fromLookup_VENDEDOR = tHash_Lookup_VENDEDOR.next();

							

							if(fromLookup_VENDEDOR != null) {
								VENDEDOR = fromLookup_VENDEDOR;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLoopVENDEDOR = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

SAIDA = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'SAIDA'
SAIDA_tmp.SK_EMPRESA = EMPRESA.SK_EMPRESA ;
SAIDA_tmp.SK_VENDEDOR = VENDEDOR.SK_VENDEDOR ;
SAIDA_tmp.DATA_REF = TalendDate.parseDate("dd-MM-yyyy",("01-")+(META.MES)+("-")+(META.ANO)) ;
SAIDA_tmp.VALOR = META.VALOR ;
SAIDA = SAIDA_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "SAIDA"
if(SAIDA != null) { 



	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"SAIDA");
					}
					
	
operation_finder_tAggregateRow_1.SK_EMPRESA = SAIDA.SK_EMPRESA;
			operation_finder_tAggregateRow_1.SK_VENDEDOR = SAIDA.SK_VENDEDOR;
			operation_finder_tAggregateRow_1.DATA_REF = SAIDA.DATA_REF;
			operation_finder_tAggregateRow_1.VALOR = SAIDA.VALOR;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.SK_EMPRESA = operation_finder_tAggregateRow_1.SK_EMPRESA;
				operation_result_tAggregateRow_1.SK_VENDEDOR = operation_finder_tAggregateRow_1.SK_VENDEDOR;
				operation_result_tAggregateRow_1.DATA_REF = operation_finder_tAggregateRow_1.DATA_REF;
				operation_result_tAggregateRow_1.VALOR = operation_finder_tAggregateRow_1.VALOR;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */

} // End of branch "SAIDA"



	
		} // close loop of lookup 'VENDEDOR' // G_TM_M_043
		
		} // close loop of lookup 'META' // G_TM_M_043
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_META != null) {
						tHash_Lookup_META.endGet();
					}
					globalMap.remove( "tHash_Lookup_META" );

					
					
				
					if(tHash_Lookup_VENDEDOR != null) {
						tHash_Lookup_VENDEDOR.endGet();
					}
					globalMap.remove( "tHash_Lookup_VENDEDOR" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"EMPRESA");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"SAIDA");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */


	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tDBOutput_1 = 0;
		



int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;
String dbschema_tDBOutput_1 = null;
String tableName_tDBOutput_1 = null;
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_1;

java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));

        int updateKeyCount_tDBOutput_1 = 3;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;
    dbschema_tDBOutput_1 = "dbo";
    String driverClass_tDBOutput_1 = "net.sourceforge.jtds.jdbc.Driver";
	
    java.lang.Class.forName(driverClass_tDBOutput_1);
    String port_tDBOutput_1 = "1433";
    String dbname_tDBOutput_1 = "DW" ;
    String url_tDBOutput_1 = "jdbc:jtds:sqlserver://" + "DESKTOP-SKA0L5T" ; 
    if (!"".equals(port_tDBOutput_1)) {
    	url_tDBOutput_1 += ":" + "1433";
    }
    if (!"".equals(dbname_tDBOutput_1)) {
				url_tDBOutput_1 += "//" + "DW"; 
	
    }
    url_tDBOutput_1 += ";appName=" + projectName + ";" + "INSTANCE=OLAP";
    dbUser_tDBOutput_1 = "ETLBI";

 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:0rF5y7GHQPFUmonTfGaW1iWxXvPCyJc88QREM5QTPwbCd2Uv");

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;	
    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
		resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
	
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;


if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
    tableName_tDBOutput_1 = "FATO_META";
} else {
    tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].[" + "FATO_META";
}
	int count_tDBOutput_1=0;

                                boolean whetherExist_tDBOutput_1 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_1.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_1 + "]" );
                                        whetherExist_tDBOutput_1 = true;
                                    } catch (java.lang.Exception e){
                                        whetherExist_tDBOutput_1 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_1) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                        stmtCreate_tDBOutput_1.execute("CREATE TABLE [" + tableName_tDBOutput_1 + "]([SK_EMPRESA] INT  not null ,[SK_VENDEDOR] INT  not null ,[DATA_REF] DATE  not null ,[VALOR] DECIMAL(10,2)  ,primary key([SK_EMPRESA],[SK_VENDEDOR],[DATA_REF]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_1 + "] WHERE [SK_EMPRESA] = ? AND [SK_VENDEDOR] = ? AND [DATA_REF] = ?");
        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
        String insert_tDBOutput_1 = "INSERT INTO [" + tableName_tDBOutput_1 + "] ([SK_EMPRESA],[SK_VENDEDOR],[DATA_REF],[VALOR]) VALUES (?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
        resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
        String update_tDBOutput_1 = "UPDATE [" + tableName_tDBOutput_1 + "] SET [VALOR] = ? WHERE [SK_EMPRESA] = ? AND [SK_VENDEDOR] = ? AND [DATA_REF] = ?";
        java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
        resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

            				    row4.SK_EMPRESA = aggregated_row_tAggregateRow_1.SK_EMPRESA;
            				    
            				    row4.SK_VENDEDOR = aggregated_row_tAggregateRow_1.SK_VENDEDOR;
            				    
            				    row4.DATA_REF = aggregated_row_tAggregateRow_1.DATA_REF;
            				    
            				    row4.VALOR = aggregated_row_tAggregateRow_1.VALOR;
            				    

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					



        whetherReject_tDBOutput_1 = false;


                    pstmt_tDBOutput_1.setInt(1, row4.SK_EMPRESA);



                    pstmt_tDBOutput_1.setInt(2, row4.SK_VENDEDOR);



                    if(row4.DATA_REF != null) {
pstmt_tDBOutput_1.setTimestamp(3, new java.sql.Timestamp(row4.DATA_REF.getTime()));
} else {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.DATE);
}

            int checkCount_tDBOutput_1 = -1;
            try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
                while(rs_tDBOutput_1.next()) {
                    checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
                }
            }
            if(checkCount_tDBOutput_1 > 0) {
                        pstmtUpdate_tDBOutput_1.setBigDecimal(1, row4.VALOR);


	                    

                        pstmtUpdate_tDBOutput_1.setInt(2 + count_tDBOutput_1, row4.SK_EMPRESA);


	                    

                        pstmtUpdate_tDBOutput_1.setInt(3 + count_tDBOutput_1, row4.SK_VENDEDOR);


	                    

                        if(row4.DATA_REF != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(4 + count_tDBOutput_1, new java.sql.Timestamp(row4.DATA_REF.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(4 + count_tDBOutput_1, java.sql.Types.DATE);
}

            try {
                    updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1 + pstmtUpdate_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
        			
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_1 = true;
                    	nb_line_tDBOutput_1++;
                    	
                            System.err.println(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_1.setInt(1, row4.SK_EMPRESA);

                        pstmtInsert_tDBOutput_1.setInt(2, row4.SK_VENDEDOR);

                        if(row4.DATA_REF != null) {
pstmtInsert_tDBOutput_1.setTimestamp(3, new java.sql.Timestamp(row4.DATA_REF.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.DATE);
}

                        pstmtInsert_tDBOutput_1.setBigDecimal(4, row4.VALOR);

            try {
                    insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1 + pstmtInsert_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_1 = true;
                    	nb_line_tDBOutput_1++;
                    	
                            System.err.println(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_1{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
						
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                	
                	conn_tDBOutput_1.commit();
            		
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
            conn_tDBOutput_1.commit();
			
        conn_tDBOutput_1 .close();
        resourceMap.put("finish_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_META"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_VENDEDOR"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class METAStruct implements routines.system.IPersistableComparableLookupRow<METAStruct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_FATO_META = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_FATO_META = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int COD_EMPRESA;

				public int getCOD_EMPRESA () {
					return this.COD_EMPRESA;
				}
				
			    public int MATRICULA_VEND;

				public int getMATRICULA_VEND () {
					return this.MATRICULA_VEND;
				}
				
			    public String ANO;

				public String getANO () {
					return this.ANO;
				}
				
			    public String MES;

				public String getMES () {
					return this.MES;
				}
				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.COD_EMPRESA;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final METAStruct other = (METAStruct) obj;
		
						if (this.COD_EMPRESA != other.COD_EMPRESA)
							return false;
					

		return true;
    }

	public void copyDataTo(METAStruct other) {

		other.COD_EMPRESA = this.COD_EMPRESA;
	            other.MATRICULA_VEND = this.MATRICULA_VEND;
	            other.ANO = this.ANO;
	            other.MES = this.MES;
	            other.VALOR = this.VALOR;
	            
	}

	public void copyKeysDataTo(METAStruct other) {

		other.COD_EMPRESA = this.COD_EMPRESA;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_FATO_META) {

        	try {

        		int length = 0;
		
			        this.COD_EMPRESA = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.COD_EMPRESA);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.MATRICULA_VEND = dis.readInt();
					
						this.ANO = readString(dis,ois);
					
						this.MES = readString(dis,ois);
					
       			    	this.VALOR = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.MATRICULA_VEND);
					
						writeString(this.ANO, dos, oos);
					
						writeString(this.MES, dos, oos);
					
       			    	oos.writeObject(this.VALOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COD_EMPRESA="+String.valueOf(COD_EMPRESA));
		sb.append(",MATRICULA_VEND="+String.valueOf(MATRICULA_VEND));
		sb.append(",ANO="+ANO);
		sb.append(",MES="+MES);
		sb.append(",VALOR="+String.valueOf(VALOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(METAStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.COD_EMPRESA, other.COD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		METAStruct META = new METAStruct();




	
	/**
	 * [tAdvancedHash_META begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_META", false);
		start_Hash.put("tAdvancedHash_META", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_META";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"META");
					}
				
		int tos_count_tAdvancedHash_META = 0;
		

			   		// connection name:META
			   		// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(META,META) | target node:tAdvancedHash_META - inputs:(META) outputs:()
			   		// linked node: tMap_1 - inputs:(EMPRESA,META,VENDEDOR) outputs:(SAIDA)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_META = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<METAStruct> tHash_Lookup_META =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<METAStruct>getLookup(matchingModeEnum_META);
	   						   
		   	   	   globalMap.put("tHash_Lookup_META", tHash_Lookup_META);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_META begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2); 
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "ETLBI";
				
				 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:NSeGW26zzRCVYmhiEqKrZkQKUSBs41Dy9/UbfZglWG+bmkJ+");
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
		    String port_tDBInput_2 = "1433";
		    String dbname_tDBInput_2 = "DW" ;
			String url_tDBInput_2 = "jdbc:jtds:sqlserver://" + "DESKTOP-SKA0L5T" ;
		    if (!"".equals(port_tDBInput_2)) {
		    	url_tDBInput_2 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_2)) {
				url_tDBInput_2 += "//" + "DW"; 
		    }
		    url_tDBInput_2 += ";appName=" + projectName + ";" + "INSTANCE=OLAP";
		    String dbschema_tDBInput_2 = "dbo";
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT dbo.STG_META_VENDAS.COD_EMPRESA,\n		dbo.STG_META_VENDAS.MATRICULA_VEND,\n		dbo.STG_META_VENDAS.ANO,\n		dbo.STG_META"
+"_VENDAS.MES,\n		dbo.STG_META_VENDAS.VALOR\nFROM	dbo.STG_META_VENDAS";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								META.COD_EMPRESA = 0;
							} else {
		                          
            META.COD_EMPRESA = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								META.MATRICULA_VEND = 0;
							} else {
		                          
            META.MATRICULA_VEND = rs_tDBInput_2.getInt(2);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								META.ANO = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(3);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		META.ANO = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	META.ANO = tmpContent_tDBInput_2;
                }
            } else {
                META.ANO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								META.MES = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(4);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		META.MES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	META.MES = tmpContent_tDBInput_2;
                }
            } else {
                META.MES = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								META.VALOR = null;
							} else {
		                          
            META.VALOR = rs_tDBInput_2.getBigDecimal(5);
            if(rs_tDBInput_2.wasNull()){
                    META.VALOR = null;
            }
		                    }
					





 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_META main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_META";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"META");
					}
					


			   
			   

					METAStruct META_HashRow = new METAStruct();
		   	   	   
				
				META_HashRow.COD_EMPRESA = META.COD_EMPRESA;
				
				META_HashRow.MATRICULA_VEND = META.MATRICULA_VEND;
				
				META_HashRow.ANO = META.ANO;
				
				META_HashRow.MES = META.MES;
				
				META_HashRow.VALOR = META.VALOR;
				
			tHash_Lookup_META.put(META_HashRow);
			
            




 


	tos_count_tAdvancedHash_META++;

/**
 * [tAdvancedHash_META main ] stop
 */
	
	/**
	 * [tAdvancedHash_META process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_META";

	

 



/**
 * [tAdvancedHash_META process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_META process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_META";

	

 



/**
 * [tAdvancedHash_META process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_META end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_META";

	

tHash_Lookup_META.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"META");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_META", true);
end_Hash.put("tAdvancedHash_META", System.currentTimeMillis());




/**
 * [tAdvancedHash_META end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_META finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_META";

	

 



/**
 * [tAdvancedHash_META finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class VENDEDORStruct implements routines.system.IPersistableComparableLookupRow<VENDEDORStruct> {
    final static byte[] commonByteArrayLock_BI_FOREST_CARGA_FATO_META = new byte[0];
    static byte[] commonByteArray_BI_FOREST_CARGA_FATO_META = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SK_VENDEDOR;

				public int getSK_VENDEDOR () {
					return this.SK_VENDEDOR;
				}
				
			    public int COD_EMPRESA;

				public int getCOD_EMPRESA () {
					return this.COD_EMPRESA;
				}
				
			    public int MATRICULA;

				public int getMATRICULA () {
					return this.MATRICULA;
				}
				
			    public String NOME;

				public String getNOME () {
					return this.NOME;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.COD_EMPRESA;
						
							result = prime * result + (int) this.MATRICULA;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final VENDEDORStruct other = (VENDEDORStruct) obj;
		
						if (this.COD_EMPRESA != other.COD_EMPRESA)
							return false;
					
						if (this.MATRICULA != other.MATRICULA)
							return false;
					

		return true;
    }

	public void copyDataTo(VENDEDORStruct other) {

		other.SK_VENDEDOR = this.SK_VENDEDOR;
	            other.COD_EMPRESA = this.COD_EMPRESA;
	            other.MATRICULA = this.MATRICULA;
	            other.NOME = this.NOME;
	            
	}

	public void copyKeysDataTo(VENDEDORStruct other) {

		other.COD_EMPRESA = this.COD_EMPRESA;
	            	other.MATRICULA = this.MATRICULA;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_FOREST_CARGA_FATO_META) {

        	try {

        		int length = 0;
		
			        this.COD_EMPRESA = dis.readInt();
					
			        this.MATRICULA = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.COD_EMPRESA);
					
					// int
				
		            	dos.writeInt(this.MATRICULA);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.SK_VENDEDOR = dis.readInt();
					
						this.NOME = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.SK_VENDEDOR);
					
						writeString(this.NOME, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_VENDEDOR="+String.valueOf(SK_VENDEDOR));
		sb.append(",COD_EMPRESA="+String.valueOf(COD_EMPRESA));
		sb.append(",MATRICULA="+String.valueOf(MATRICULA));
		sb.append(",NOME="+NOME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(VENDEDORStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.COD_EMPRESA, other.COD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.MATRICULA, other.MATRICULA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		VENDEDORStruct VENDEDOR = new VENDEDORStruct();




	
	/**
	 * [tAdvancedHash_VENDEDOR begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_VENDEDOR", false);
		start_Hash.put("tAdvancedHash_VENDEDOR", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_VENDEDOR";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"VENDEDOR");
					}
				
		int tos_count_tAdvancedHash_VENDEDOR = 0;
		

			   		// connection name:VENDEDOR
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_1) outputs:(VENDEDOR,VENDEDOR) | target node:tAdvancedHash_VENDEDOR - inputs:(VENDEDOR) outputs:()
			   		// linked node: tMap_1 - inputs:(EMPRESA,META,VENDEDOR) outputs:(SAIDA)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_VENDEDOR = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<VENDEDORStruct> tHash_Lookup_VENDEDOR =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<VENDEDORStruct>getLookup(matchingModeEnum_VENDEDOR);
	   						   
		   	   	   globalMap.put("tHash_Lookup_VENDEDOR", tHash_Lookup_VENDEDOR);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_VENDEDOR begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_3  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3); 
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "ETLBI";
				
				 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:bryzoHvGb1fSWHs5AWknVWK/LSojoLiJNZpm0pKz0m3zUk5n");
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
		    String port_tDBInput_3 = "1433";
		    String dbname_tDBInput_3 = "DW" ;
			String url_tDBInput_3 = "jdbc:jtds:sqlserver://" + "DESKTOP-SKA0L5T" ;
		    if (!"".equals(port_tDBInput_3)) {
		    	url_tDBInput_3 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_3)) {
				url_tDBInput_3 += "//" + "DW"; 
		    }
		    url_tDBInput_3 += ";appName=" + projectName + ";" + "INSTANCE=OLAP";
		    String dbschema_tDBInput_3 = "dbo";
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT dbo.DIM_VENDEDOR.SK_VENDEDOR,\n		dbo.DIM_VENDEDOR.COD_EMPRESA,\n		dbo.DIM_VENDEDOR.MATRICULA,\n		dbo.DIM_VENDEDOR.N"
+"OME\nFROM	dbo.DIM_VENDEDOR";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								VENDEDOR.SK_VENDEDOR = 0;
							} else {
		                          
            VENDEDOR.SK_VENDEDOR = rs_tDBInput_3.getInt(1);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								VENDEDOR.COD_EMPRESA = 0;
							} else {
		                          
            VENDEDOR.COD_EMPRESA = rs_tDBInput_3.getInt(2);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								VENDEDOR.MATRICULA = 0;
							} else {
		                          
            VENDEDOR.MATRICULA = rs_tDBInput_3.getInt(3);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								VENDEDOR.NOME = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(4);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		VENDEDOR.NOME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	VENDEDOR.NOME = tmpContent_tDBInput_3;
                }
            } else {
                VENDEDOR.NOME = null;
            }
		                    }
					





 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_VENDEDOR main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_VENDEDOR";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"VENDEDOR");
					}
					


			   
			   

					VENDEDORStruct VENDEDOR_HashRow = new VENDEDORStruct();
		   	   	   
				
				VENDEDOR_HashRow.SK_VENDEDOR = VENDEDOR.SK_VENDEDOR;
				
				VENDEDOR_HashRow.COD_EMPRESA = VENDEDOR.COD_EMPRESA;
				
				VENDEDOR_HashRow.MATRICULA = VENDEDOR.MATRICULA;
				
				VENDEDOR_HashRow.NOME = VENDEDOR.NOME;
				
			tHash_Lookup_VENDEDOR.put(VENDEDOR_HashRow);
			
            




 


	tos_count_tAdvancedHash_VENDEDOR++;

/**
 * [tAdvancedHash_VENDEDOR main ] stop
 */
	
	/**
	 * [tAdvancedHash_VENDEDOR process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_VENDEDOR";

	

 



/**
 * [tAdvancedHash_VENDEDOR process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_VENDEDOR process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_VENDEDOR";

	

 



/**
 * [tAdvancedHash_VENDEDOR process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_VENDEDOR end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_VENDEDOR";

	

tHash_Lookup_VENDEDOR.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"VENDEDOR");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_VENDEDOR", true);
end_Hash.put("tAdvancedHash_VENDEDOR", System.currentTimeMillis());




/**
 * [tAdvancedHash_VENDEDOR end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_VENDEDOR finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_VENDEDOR";

	

 



/**
 * [tAdvancedHash_VENDEDOR finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final CARGA_FATO_META CARGA_FATO_METAClass = new CARGA_FATO_META();

        int exitCode = CARGA_FATO_METAClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = CARGA_FATO_META.class.getClassLoader().getResourceAsStream("bi_forest/carga_fato_meta_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = CARGA_FATO_META.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : CARGA_FATO_META");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     130830 characters generated by Talend Open Studio for Data Integration 
 *     on the 19 de Maio de 2024 22h4min6s BRT
 ************************************************************************************************/